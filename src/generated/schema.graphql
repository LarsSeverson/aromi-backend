type Accord {
  color: String!
  id: ID!
  name: String!
}

type AccordConnection {
  edges: [AccordEdge!]!
  pageInfo: PageInfo!
}

type AccordEdge {
  cursor: String!
  node: Accord!
}

input AccordPaginationInput {
  after: String
  first: Int
  sort: AccordSortInput
}

type AccordRequest {
  color: String
  description: String
  id: ID!
  image: AccordRequestImage
  name: String
  requestStatus: RequestStatus!
  user: User!
  version: Int!
  votes: VoteInfo!
}

type AccordRequestConnection {
  edges: [AccordRequestEdge!]!
  pageInfo: PageInfo!
}

type AccordRequestEdge {
  cursor: String!
  node: AccordRequest!
}

type AccordRequestImage {
  id: ID!
  type: String!
  url: String
}

type AccordRequestImageConnection {
  edges: [AccordRequestImageEdge!]!
  pageInfo: PageInfo!
}

type AccordRequestImageEdge {
  cursor: String!
  node: AccordRequestImage!
}

enum AccordSortBy {
  RECENT
}

input AccordSortInput {
  by: AccordSortBy
  direction: SortDirection
}

type Asset {
  id: ID!
  name: String!
  size: Int!
  type: String!
  url: String
}

type AuthCodeDeliveryDetails {
  attribute: String
  destination: String
  method: String
}

type AuthDeliveryResult {
  delivery: AuthCodeDeliveryDetails
  isComplete: Boolean!
}

type AuthTokenPayload {
  accessToken: String!
  expiresIn: Int!
  idToken: String!
}

enum AvatarStatus {
  FAILED
  PENDING
  PROCESSING
  READY
}

type Brand {
  id: ID!
  image: Asset!
  name: String!
}

type BrandRequest {
  description: String
  id: ID!
  image: BrandRequestImage
  name: String
  requestStatus: RequestStatus!
  user: User!
  version: Int!
  votes: VoteInfo!
  website: String
}

type BrandRequestConnection {
  edges: [BrandRequestEdge!]!
  pageInfo: PageInfo!
}

type BrandRequestEdge {
  cursor: String!
  node: BrandRequest!
}

type BrandRequestImage {
  id: ID!
  type: String!
  url: String
}

type BrandRequestImageConnection {
  edges: [BrandRequestImageEdge!]!
  pageInfo: PageInfo!
}

type BrandRequestImageEdge {
  cursor: String!
  node: BrandRequestImage!
}

enum Concentration {
  BODY_MIST
  EAU_FRAICHE
  EDC
  EDP
  EDT
  OIL
  OTHER
  PARFUM
}

input ConfirmForgotPasswordInput {
  code: String!
  email: String!
  password: String!
}

input ConfirmSignUpInput {
  code: String!
  email: String!
}

input CreateAccordRequestInput {
  color: String
  description: String
  name: String
}

input CreateBrandRequestInput {
  description: String
  name: String
  website: String
}

input CreateFragranceRequestInput {
  concentration: Concentration
  description: String
  name: String
  releaseYear: Int
  status: FragranceStatus
}

input CreateNoteRequestInput {
  color: String
  description: String
  name: String
}

scalar Date

input DeleteAccordRequestImageInput {
  assetId: ID!
  requestId: ID!
  version: Int!
}

input DeleteAccordRequestInput {
  id: ID!
}

input DeleteBrandRequestImageInput {
  assetId: ID!
  requestId: ID!
  version: Int!
}

input DeleteBrandRequestInput {
  id: ID!
}

input DeleteFragranceRequestImageInput {
  assetId: ID!
  requestId: ID!
  version: Int!
}

input DeleteFragranceRequestInput {
  id: ID!
}

input DeleteNoteRequestImageInput {
  assetId: ID!
  requestId: ID!
  version: Int!
}

input DeleteNoteRequestInput {
  id: ID!
}

input FinalizeAccordRequestImageInput {
  assetId: ID!
  requestId: ID!
  version: Int!
}

input FinalizeBrandRequestImageInput {
  assetId: ID!
  requestId: ID!
  version: Int!
}

input FinalizeFragranceRequestImageInput {
  assetId: ID!
  requestId: ID!
  version: Int!
}

input FinalizeNoteRequestImageInput {
  assetId: ID!
  requestId: ID!
  version: Int!
}

input ForgotPasswordInput {
  email: String!
}

type Fragrance {
  brand: String!
  concentration: Concentration!
  description: String!
  id: ID!
  images: FragranceImageConnection!
  name: String!
  releaseYear: Int!
  status: FragranceStatus!
}

type FragranceConnection {
  edges: [FragranceEdge!]!
  pageInfo: PageInfo!
}

type FragranceEdge {
  cursor: String!
  node: Fragrance!
}

type FragranceImage {
  bg: String
  height: Int!
  id: ID!
  url: String!
  width: Int!
}

type FragranceImageConnection {
  edges: [FragranceImageEdge!]!
  pageInfo: PageInfo!
}

type FragranceImageEdge {
  cursor: String!
  node: FragranceImage!
}

type FragranceRequest {
  accords: [Accord!]!
  brand: Brand
  concentration: Concentration
  description: String
  fragranceStatus: FragranceStatus
  id: ID!
  image: FragranceRequestImage
  name: String
  notes(layer: NoteLayer!): [Note!]!
  releaseYear: Int
  requestStatus: RequestStatus!
  trait(type: TraitTypeEnum!): FragranceRequestTrait!
  traits: [FragranceRequestTrait!]!
  user: User!
  version: Int!
  votes: VoteInfo!
}

type FragranceRequestConnection {
  edges: [FragranceRequestEdge!]!
  pageInfo: PageInfo!
}

type FragranceRequestEdge {
  cursor: String!
  node: FragranceRequest!
}

type FragranceRequestImage {
  id: ID!
  type: String!
  url: String!
}

type FragranceRequestImageConnection {
  edges: [FragranceRequestImageEdge!]!
  pageInfo: PageInfo!
}

type FragranceRequestImageEdge {
  cursor: String!
  node: FragranceRequestImage!
}

type FragranceRequestTrait {
  selectedOption: TraitOption!
  traitType: TraitTypeEnum!
}

enum FragranceStatus {
  CURRENT
  DISCONTINUED
  REFORMULATED
}

scalar JSON

input LogInInput {
  email: String!
  password: String!
}

type Mutation {
  confirmForgotPassword(input: ConfirmForgotPasswordInput!): Boolean!
  confirmSignUp(input: ConfirmSignUpInput!): Boolean!
  createAccordRequest(input: CreateAccordRequestInput!): AccordRequest!
  createBrandRequest(input: CreateBrandRequestInput!): BrandRequest!
  createFragranceRequest(input: CreateFragranceRequestInput!): FragranceRequest!
  createNoteRequest(input: CreateNoteRequestInput!): NoteRequest!
  deleteAccordRequest(input: DeleteAccordRequestInput!): AccordRequest!
  deleteAccordRequestImage(input: DeleteAccordRequestImageInput!): AccordRequest!
  deleteBrandRequest(input: DeleteBrandRequestInput!): BrandRequest!
  deleteBrandRequestImage(input: DeleteBrandRequestImageInput!): BrandRequest!
  deleteFragranceRequest(input: DeleteFragranceRequestInput!): FragranceRequest!
  deleteFragranceRequestImage(input: DeleteFragranceRequestImageInput!): FragranceRequest!
  deleteNoteRequest(input: DeleteNoteRequestInput!): NoteRequest!
  deleteNoteRequestImage(input: DeleteNoteRequestImageInput!): NoteRequest!
  finalizeAccordRequestImage(input: FinalizeAccordRequestImageInput!): AccordRequest!
  finalizeBrandRequestImage(input: FinalizeBrandRequestImageInput!): BrandRequest!
  finalizeFragranceRequestImage(input: FinalizeFragranceRequestImageInput!): FragranceRequest!
  finalizeNoteRequestImage(input: FinalizeNoteRequestImageInput!): NoteRequest!
  forgotPassword(input: ForgotPasswordInput!): AuthDeliveryResult!
  logIn(input: LogInInput!): AuthTokenPayload!
  logOut: Boolean!
  refresh: AuthTokenPayload
  resendSignUpCode(input: ResendSignUpCodeInput!): AuthDeliveryResult!
  setFragranceRequestAccords(input: SetFragranceRequestAccordsInput!): FragranceRequest!
  setFragranceRequestBrand(input: SetFragranceRequestBrandInput!): FragranceRequest!
  setFragranceRequestNotes(input: SetFragranceRequestNotesInput!): FragranceRequest!
  setFragranceRequestTrait(input: SetFragranceRequestTraitInput!): FragranceRequest!
  signUp(input: SignUpInput!): AuthDeliveryResult!
  stageAccordRequestImage(input: StageAssetInput!): PresignedUpload!
  stageBrandRequestImage(input: StageAssetInput!): PresignedUpload!
  stageFragranceRequestImage(input: StageAssetInput!): PresignedUpload!
  stageNoteRequestImage(input: StageAssetInput!): PresignedUpload!
  submitAccordRequest(input: SubmitAccordRequestInput!): AccordRequest!
  submitBrandRequest(input: SubmitBrandRequestInput!): BrandRequest!
  submitFragranceRequest(input: SubmitFragranceRequestInput!): FragranceRequest!
  submitNoteRequest(input: SubmitNoteRequestInput!): NoteRequest!
  updateAccordRequest(input: UpdateAccordRequestInput!): AccordRequest!
  updateBrandRequest(input: UpdateBrandRequestInput!): BrandRequest!
  updateFragranceRequest(input: UpdateFragranceRequestInput!): FragranceRequest!
  updateNoteRequest(input: UpdateNoteRequestInput!): NoteRequest!
  updateUser(input: UpdateUserInput!): User!
  updateUserAvatar(input: StageAssetInput!): PresignedUpload!
  voteOnAccordRequest(input: VoteOnAccordRequestInput!): AccordRequest!
  voteOnBrandRequest(input: VoteOnBrandRequestInput!): BrandRequest!
  voteOnFragranceRequest(input: VoteOnFragranceRequestInput!): FragranceRequest!
  voteOnNoteRequest(input: VoteOnNoteRequestInput!): NoteRequest!
}

type Note {
  id: ID!
  name: String!
  thumbnailUrl: String!
}

type NoteConnection {
  edges: [NoteEdge!]!
  pageInfo: PageInfo!
}

type NoteEdge {
  cursor: String!
  node: Note!
}

enum NoteLayer {
  BASE
  MIDDLE
  TOP
}

input NotePaginationInput {
  after: String
  first: Int
  sort: NoteSortInput
}

type NoteRequest {
  description: String
  id: ID!
  image: NoteRequestImage
  name: String
  requestStatus: RequestStatus!
  user: User!
  version: Int!
  votes: VoteInfo!
}

type NoteRequestConnection {
  edges: [NoteRequestEdge!]!
  pageInfo: PageInfo!
}

type NoteRequestEdge {
  cursor: String!
  node: NoteRequest!
}

type NoteRequestImage {
  id: ID!
  type: String!
  url: String
}

type NoteRequestImageConnection {
  edges: [NoteRequestImageEdge!]!
  pageInfo: PageInfo!
}

type NoteRequestImageEdge {
  cursor: String!
  node: NoteRequestImage!
}

enum NoteSortBy {
  RECENT
}

input NoteSortInput {
  by: NoteSortBy
  direction: SortDirection
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type PresignedUpload {
  fields: JSON!
  id: ID!
  url: String!
}

type Query {
  accordRequest(id: ID!): AccordRequest!
  accordRequests(input: RequestPaginationInput): AccordRequestConnection!
  accords(input: AccordPaginationInput): AccordConnection!
  brandRequest(id: ID!): BrandRequest!
  brandRequests(input: RequestPaginationInput): BrandRequestConnection!
  fragranceRequest(id: ID!): FragranceRequest!
  fragranceRequests(input: RequestPaginationInput): FragranceRequestConnection!
  me: User!
  noteRequest(id: ID!): NoteRequest!
  noteRequests(input: RequestPaginationInput): NoteRequestConnection!
  notes(input: NotePaginationInput): NoteConnection!
  user(id: ID!): User!
}

input RequestPaginationInput {
  after: String
  first: Int
  sort: RequestSortInput
}

enum RequestSortBy {
  RECENT
}

input RequestSortInput {
  by: RequestSortBy
  direction: SortDirection
}

enum RequestStatus {
  ACCEPTED
  DRAFT
  PENDING
  REJECTED
}

input ResendSignUpCodeInput {
  email: String!
}

input SetFragranceRequestAccordsInput {
  accordIds: [ID!]!
  requestId: ID!
  version: Int!
}

input SetFragranceRequestBrandInput {
  brandId: ID
  requestId: ID!
  version: Int!
}

input SetFragranceRequestNotesInput {
  layer: NoteLayer!
  noteIds: [ID!]!
  requestId: ID!
  version: Int!
}

input SetFragranceRequestTraitInput {
  requestId: ID!
  score: Int!
  traitType: TraitTypeEnum!
  version: Int!
}

input SignUpInput {
  email: String!
  password: String!
}

enum SortDirection {
  ASCENDING
  DESCENDING
}

input StageAssetInput {
  contentSize: Int!
  contentType: String!
  fileName: String!
  id: ID!
}

input SubmitAccordRequestInput {
  id: ID!
}

input SubmitBrandRequestInput {
  id: ID!
}

input SubmitFragranceRequestInput {
  id: ID!
}

input SubmitNoteRequestInput {
  id: ID!
}

type Trait {
  myVote: TraitVote
  options: [TraitOption!]!
  stats: TraitStats
  traitType: TraitTypeEnum!
}

type TraitOption {
  id: ID!
  label: String!
  score: Int!
}

type TraitStats {
  averageScore: Float!
  distribution: [TraitVoteDistribution!]!
  totalVotes: Int!
}

enum TraitTypeEnum {
  APPEAL
  BALANCE
  COMPLEXITY
  GENDER
  LONGEVITY
  PROJECTION
}

type TraitVote {
  option: TraitOption!
}

type TraitVoteDistribution {
  option: TraitOption!
  votes: Int!
}

input UpdateAccordRequestInput {
  color: String
  description: String
  id: ID!
  name: String
  version: Int!
}

input UpdateBrandRequestInput {
  description: String
  id: ID!
  name: String
  version: Int!
  website: String
}

input UpdateFragranceRequestInput {
  concentration: Concentration
  description: String
  id: ID!
  name: String
  releaseYear: Int
  status: FragranceStatus
  version: Int!
}

input UpdateNoteRequestInput {
  color: String
  description: String
  id: ID!
  name: String
  version: Int!
}

input UpdateUserInput {
  id: ID!
  username: String
}

type User {
  avatarSrc: String
  avatarStatus: AvatarStatus!
  brandRequests(input: RequestPaginationInput): BrandRequestConnection!
  email: String!
  fragranceRequests(input: RequestPaginationInput): FragranceRequestConnection!
  id: ID!
  username: String!
}

type VoteInfo {
  downvotes: Int!
  myVote: Int
  score: Int!
  upvotes: Int!
}

input VoteOnAccordRequestInput {
  requestId: ID!
  vote: Int!
}

input VoteOnBrandRequestInput {
  requestId: ID!
  vote: Int!
}

input VoteOnFragranceRequestInput {
  requestId: ID!
  vote: Int!
}

input VoteOnNoteRequestInput {
  requestId: ID!
  vote: Int!
}