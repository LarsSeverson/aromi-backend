type Accord {
  color: String!
  id: ID!
  name: String!
}

type AccordConnection {
  edges: [AccordEdge!]!
  pageInfo: PageInfo!
}

type AccordEdge {
  cursor: String!
  node: Accord!
}

input AccordPaginationInput {
  after: String
  first: Int
  sort: AccordSortInput
}

enum AccordSortBy {
  RECENT
}

input AccordSortInput {
  by: AccordSortBy
  direction: SortDirection
}

type Asset {
  id: ID!
  name: String!
  size: Int!
  type: String!
  url: String
}

type AuthCodeDeliveryDetails {
  attribute: String
  destination: String
  method: String
}

type AuthDeliveryResult {
  delivery: AuthCodeDeliveryDetails
  isComplete: Boolean!
}

type AuthTokenPayload {
  accessToken: String!
  expiresIn: Int!
  idToken: String!
}

enum AvatarStatus {
  FAILED
  PENDING
  PROCESSING
  READY
}

enum Concentration {
  BODY_MIST
  EAU_FRAICHE
  EDC
  EDP
  EDT
  OIL
  OTHER
  PARFUM
}

input ConfirmForgotPasswordInput {
  code: String!
  email: String!
  password: String!
}

input ConfirmSignUpInput {
  code: String!
  email: String!
}

input CreateFragranceDraftInput {
  concentration: Concentration
  description: String
  name: String
  releaseYear: Int
  status: FragranceStatus
}

scalar Date

input DeleteFragranceDraftImageInput {
  assetId: ID!
  draftId: ID!
  version: Int!
}

input DeleteFragranceDraftInput {
  id: ID!
}

interface Draft {
  id: ID!
  user: User!
}

input DraftPaginationInput {
  after: String
  first: Int
  sort: DraftSortInput
}

enum DraftSortBy {
  RECENT
}

input DraftSortInput {
  by: DraftSortBy
  direction: SortDirection
}

input FinalizeFragranceDraftImageInput {
  assetId: ID!
  draftId: ID!
  version: Int!
}

input ForgotPasswordInput {
  email: String!
}

type Fragrance {
  brand: String!
  concentration: Concentration!
  description: String!
  id: ID!
  images: FragranceImageConnection!
  name: String!
  releaseYear: Int!
  status: FragranceStatus!
}

type FragranceConnection {
  edges: [FragranceEdge!]!
  pageInfo: PageInfo!
}

type FragranceDraft {
  concentration: Concentration
  description: String
  id: ID!
  image: FragranceDraftImage
  name: String
  releaseYear: Int
  status: FragranceStatus
  user: User!
  version: Int!
}

type FragranceDraftConnection {
  edges: [FragranceDraftEdge!]!
  pageInfo: PageInfo!
}

type FragranceDraftEdge {
  cursor: String!
  node: FragranceDraft!
}

type FragranceDraftImage {
  draft: FragranceDraft!
  id: ID!
  type: String!
  url: String!
}

type FragranceDraftImageConnection {
  edges: [FragranceDraftImageEdge!]!
  pageInfo: PageInfo!
}

type FragranceDraftImageEdge {
  cursor: String!
  node: FragranceDraftImage!
}

type FragranceEdge {
  cursor: String!
  node: Fragrance!
}

type FragranceImage {
  bg: String
  height: Int!
  id: ID!
  url: String!
  width: Int!
}

type FragranceImageConnection {
  edges: [FragranceImageEdge!]!
  pageInfo: PageInfo!
}

type FragranceImageEdge {
  cursor: String!
  node: FragranceImage!
}

enum FragranceStatus {
  CURRENT
  DISCONTINUED
  REFORMULATED
}

scalar JSON

input LogInInput {
  email: String!
  password: String!
}

type Mutation {
  confirmForgotPassword(input: ConfirmForgotPasswordInput!): Boolean!
  confirmSignUp(input: ConfirmSignUpInput!): Boolean!
  createFragranceDraft(input: CreateFragranceDraftInput!): FragranceDraft!
  deleteFragranceDraft(input: DeleteFragranceDraftInput!): FragranceDraft!
  deleteFragranceDraftImage(input: DeleteFragranceDraftImageInput!): FragranceDraft!
  finalizeFragranceDraftImage(input: FinalizeFragranceDraftImageInput!): FragranceDraft!
  forgotPassword(input: ForgotPasswordInput!): AuthDeliveryResult!
  logIn(input: LogInInput!): AuthTokenPayload!
  logOut: Boolean!
  refresh: AuthTokenPayload
  resendSignUpCode(input: ResendSignUpCodeInput!): AuthDeliveryResult!
  signUp(input: SignUpInput!): AuthDeliveryResult!
  stageFragranceDraftImage(input: StageAssetInput!): PresignedUpload!
  updateFragranceDraft(input: UpdateFragranceDraftInput!): FragranceDraft!
  updateUser(input: UpdateUserInput!): User!
  updateUserAvatar(input: StageAssetInput!): PresignedUpload!
}

type Note {
  id: ID!
  name: String!
  thumbnailUrl: String!
}

type NoteConnection {
  edges: [NoteEdge!]!
  pageInfo: PageInfo!
}

type NoteEdge {
  cursor: String!
  node: Note!
}

input NotePaginationInput {
  after: String
  first: Int
  sort: NoteSortInput
}

enum NoteSortBy {
  RECENT
}

input NoteSortInput {
  by: NoteSortBy
  direction: SortDirection
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type PresignedUpload {
  fields: JSON!
  id: ID!
  url: String!
}

type Query {
  accords(input: AccordPaginationInput): AccordConnection!
  fragranceDraft(id: ID!): FragranceDraft!
  fragranceDrafts(input: DraftPaginationInput): FragranceDraftConnection!
  me: User!
  notes(input: NotePaginationInput): NoteConnection!
  user(id: ID!): User!
}

input ResendSignUpCodeInput {
  email: String!
}

input SignUpInput {
  email: String!
  password: String!
}

enum SortDirection {
  ASCENDING
  DESCENDING
}

input StageAssetInput {
  contentSize: Int!
  contentType: String!
  fileName: String!
  id: ID!
}

input UpdateFragranceDraftInput {
  concentration: Concentration
  description: String
  id: ID!
  name: String
  releaseYear: Int
  status: FragranceStatus
  version: Int!
}

input UpdateUserInput {
  id: ID!
  username: String
}

type User {
  avatarSrc: String
  avatarStatus: AvatarStatus!
  email: String!
  id: ID!
  username: String!
}