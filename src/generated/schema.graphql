input AccordsInput {
  fill: Boolean
  pagination: VotePaginationInput
}

input CreateCollectionInput {
  name: String!
}

scalar Date

type Fragrance {
  accords(input: AccordsInput): FragranceAccordConnection!
  brand: String!
  dCreated: Date!
  dModified: Date!
  id: Int!
  images(input: QueryInput): FragranceImageConnection!
  myReview: FragranceReview
  name: String!
  notes: FragranceNotes!
  rating: Float!
  reviewDistribution: FragranceReviewDistribution!
  reviews(input: VoteQueryInput): FragranceReviewConnection!
  reviewsCount: Int!
  traits: FragranceTraits!
  votes: FragranceVote!
}

type FragranceAccord {
  accordId: Int!
  color: String!
  id: Int!
  myVote: Boolean
  name: String!
  votes: Int!
}

type FragranceAccordConnection {
  edges: [FragranceAccordEdge!]!
  pageInfo: PageInfo!
}

type FragranceAccordEdge {
  cursor: String!
  node: FragranceAccord!
}

type FragranceCollection {
  dCreated: Date!
  dModified: Date!
  fragrances(input: QueryInput): FragranceConnection!
  id: Int!
  name: String!
  user: User!
}

type FragranceCollectionConnection {
  edges: [FragranceCollectionEdge!]!
  pageInfo: PageInfo!
}

type FragranceCollectionEdge {
  cursor: String!
  node: FragranceCollection!
}

type FragranceConnection {
  edges: [FragranceEdge!]!
  pageInfo: PageInfo!
}

type FragranceEdge {
  cursor: String!
  node: Fragrance!
}

type FragranceImage {
  id: Int!
  url: String!
}

type FragranceImageConnection {
  edges: [FragranceImageEdge!]!
  pageInfo: PageInfo
}

type FragranceImageEdge {
  cursor: String!
  node: FragranceImage!
}

type FragranceNote {
  icon: String!
  id: Int!
  layer: NoteLayer!
  myVote: Boolean
  name: String!
  noteId: Int!
  votes: Int!
}

type FragranceNoteConnection {
  edges: [FragranceNoteEdge!]!
  pageInfo: PageInfo!
}

type FragranceNoteEdge {
  cursor: String!
  node: FragranceNote!
}

type FragranceNotes {
  base(input: NotesInput): FragranceNoteConnection!
  fragranceId: Int!
  middle(input: NotesInput): FragranceNoteConnection!
  top(input: NotesInput): FragranceNoteConnection!
}

type FragranceReview {
  author: String!
  dCreated: Date!
  dDeleted: Date
  dModified: Date!
  id: Int!
  myVote: Boolean
  rating: Int!
  review: String!
  votes: Int!
}

type FragranceReviewConnection {
  edges: [FragranceReviewEdge!]!
  pageInfo: PageInfo!
}

type FragranceReviewDistribution {
  five: Int!
  four: Int!
  one: Int!
  three: Int!
  two: Int!
}

type FragranceReviewEdge {
  cursor: String!
  node: FragranceReview!
}

type FragranceTrait {
  id: Int!
  myVote: Float
  trait: FragranceTraitType!
  value: Float!
}

enum FragranceTraitType {
  allure
  balance
  complexity
  gender
  longevity
  sillage
}

type FragranceTraits {
  allure: FragranceTrait
  balance: FragranceTrait
  complexity: FragranceTrait
  fragranceId: Int!
  gender: FragranceTrait
  longevity: FragranceTrait
  sillage: FragranceTrait
}

type FragranceVote {
  dislikes: Int!
  id: Int!
  likes: Int!
  myVote: Boolean
}

type Mutation {
  addFragranceToCollection(collectionId: Int!, fragranceId: Int!): FragranceCollection
  createCollection(input: CreateCollectionInput!): FragranceCollection
  removeFragranceFromCollection(collectionId: Int!, fragranceId: Int!): FragranceCollection
  reviewFragrance(fragranceId: Int!, myRating: Int!, myReview: String!): FragranceReview
  upsertUser(cognitoId: String!, email: String!): User
  voteOnAccord(accordId: Int!, fragranceId: Int!, myVote: Boolean!): FragranceAccord
  voteOnFragrance(fragranceId: Int!, myVote: Boolean): FragranceVote
  voteOnNote(fragranceId: Int!, layer: NoteLayer!, myVote: Boolean!, noteId: Int!): FragranceNote
  voteOnReview(myVote: Boolean, reviewId: Int!): FragranceReview
  voteOnTrait(fragranceId: Int!, myVote: Float!, trait: FragranceTraitType!): FragranceTrait
}

enum NoteLayer {
  base
  middle
  top
}

input NotesInput {
  fill: Boolean
  pagination: VotePaginationInput
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

input PaginationInput {
  after: String
  first: Int
  sort: SortByInput
}

type Query {
  fragrance(id: Int!): Fragrance
  fragrances(input: QueryInput): FragranceConnection!
  me: User
  user(id: Int!): User
}

input QueryInput {
  pagination: PaginationInput
}

enum SortBy {
  created
  id
  modified
}

input SortByInput {
  by: SortBy!
  direction: SortDirection! = desc
}

enum SortDirection {
  asc
  desc
}

type User {
  cognitoId: String!
  collections(input: QueryInput): FragranceCollectionConnection!
  email: String!
  followers: Int!
  following: Int!
  id: Int!
  likes(input: QueryInput): FragranceConnection!
  reviews(input: VoteQueryInput): FragranceReviewConnection!
  username: String!
}

input VotePaginationInput {
  after: String
  first: Int
  sort: VoteSortByInput
}

input VoteQueryInput {
  pagination: VotePaginationInput
}

enum VoteSortBy {
  created
  id
  modified
  votes
}

input VoteSortByInput {
  by: VoteSortBy!
  direction: SortDirection! = desc
}