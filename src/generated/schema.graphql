input AccordsInput {
  fill: Boolean
  pagination: PaginationInput
}

type Audit {
  createdAt: Date!
  deletedAt: Date
  updatedAt: Date!
}

type AuthPayload {
  accessToken: String!
  expiresAt: Int!
  idToken: String!
}

type CodeDeliveryDetails {
  attribute: String
  destination: String
  method: String
}

input CreateCollectionInput {
  name: String!
}

scalar Date

type Fragrance {
  accords(input: AccordsInput): FragranceAccordConnection!
  audit: Audit!
  brand: String!
  id: Int!
  images(input: PaginationInput): FragranceImageConnection!
  myReview: FragranceReview
  name: String!
  notes: FragranceNotes!
  rating: Float!
  reviewDistribution: FragranceReviewDistribution!
  reviews(input: PaginationInput): FragranceReviewConnection!
  reviewsCount: Int!
  traits: [FragranceTrait!]!
  votes: VoteSummary!
}

type FragranceAccord {
  accordId: Int!
  audit: Audit!
  color: String!
  id: Int!
  isFill: Boolean!
  name: String!
  votes: VoteSummary!
}

type FragranceAccordConnection {
  edges: [FragranceAccordEdge!]!
  pageInfo: PageInfo!
}

type FragranceAccordEdge {
  cursor: String!
  node: FragranceAccord!
}

type FragranceConnection {
  edges: [FragranceEdge!]!
  pageInfo: PageInfo!
}

type FragranceEdge {
  cursor: String!
  node: Fragrance!
}

type FragranceImage {
  alt: String
  audit: Audit!
  id: Int!
  src: String!
}

type FragranceImageConnection {
  edges: [FragranceImageEdge!]!
  pageInfo: PageInfo!
}

type FragranceImageEdge {
  cursor: String!
  node: FragranceImage!
}

type FragranceNote {
  audit: Audit!
  id: Int!
  isFill: Boolean!
  layer: NoteLayer!
  name: String!
  noteId: Int!
  votes: VoteSummary!
}

type FragranceNoteConnection {
  edges: [FragranceNoteEdge!]!
  pageInfo: PageInfo!
}

type FragranceNoteEdge {
  cursor: String!
  node: FragranceNote!
}

type FragranceNotes {
  base(input: NotesInput): FragranceNoteConnection!
  middle(input: NotesInput): FragranceNoteConnection!
  top(input: NotesInput): FragranceNoteConnection!
}

type FragranceReview {
  audit: Audit!
  id: Int!
  rating: Int!
  text: String!
  user: User!
  votes: VoteSummary!
}

type FragranceReviewConnection {
  edges: [FragranceReviewEdge!]!
  pageInfo: PageInfo!
}

type FragranceReviewDistribution {
  five: Int!
  four: Int!
  one: Int!
  three: Int!
  two: Int!
}

type FragranceReviewEdge {
  cursor: String!
  node: FragranceReview!
}

type FragranceTrait {
  myVote: Float
  score: Float!
  type: FragranceTraitType!
}

enum FragranceTraitType {
  ALLURE
  BALANCE
  COMPLEXITY
  GENDER
  LONGEVITY
  SILLAGE
}

type Mutation {
  confirmForgotPassword(confirmationCode: String!, email: String!, newPassword: String!): Boolean!
  confirmSignUp(confirmationCode: String!, email: String!): Boolean!
  createCollection(input: CreateCollectionInput!): UserCollection
  forgotPassword(email: String!): Boolean!
  logIn(email: String!, password: String!): AuthPayload!
  logOut: Boolean!
  refresh: AuthPayload
  resendSignUpConfirmationCode(email: String!): Boolean!
  signUp(email: String!, password: String!): SignUpResult!
  voteOnAccord(input: VoteOnAccordInput!): FragranceAccord!
  voteOnFragrance(input: VoteOnFragranceInput!): Fragrance!
  voteOnNote(input: VoteOnNoteInput!): FragranceNote!
  voteOnTrait(input: VoteOnTraitInput!): FragranceTrait!
}

enum NoteLayer {
  BASE
  MIDDLE
  TOP
}

input NotesInput {
  fill: Boolean
  pagination: PaginationInput
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

input PaginationInput {
  after: String
  first: Int
  sort: SortByInput
}

type Query {
  fragrance(id: Int!): Fragrance
  fragrances(input: PaginationInput): FragranceConnection!
  me: User
  user(id: Int!): User
}

type SignUpResult {
  complete: Boolean!
  delivery: CodeDeliveryDetails
}

enum SortBy {
  createdAt
  id
  updatedAt
}

input SortByInput {
  by: SortBy! = updatedAt
  direction: SortDirection! = DESCENDING
}

enum SortDirection {
  ASCENDING
  DESCENDING
}

type User {
  audit: Audit!
  collections(input: PaginationInput): UserCollectionConnection!
  email: String!
  followerCount: Int!
  followingCount: Int!
  id: Int!
  likes(input: PaginationInput): FragranceConnection!
  reviews(input: PaginationInput): FragranceReviewConnection!
  username: String!
}

type UserCollection {
  audit: Audit!
  id: Int!
  items(input: PaginationInput): UserCollectionItemConnection!
  name: String!
  user: User!
}

type UserCollectionConnection {
  edges: [UserCollectionEdge!]!
  pageInfo: PageInfo!
}

type UserCollectionEdge {
  cursor: String!
  node: UserCollection!
}

type UserCollectionItem {
  audit: Audit!
  fragrance: Fragrance!
  id: Int!
}

type UserCollectionItemConnection {
  edges: [UserCollectionItemEdge!]!
  pageInfo: PageInfo!
}

type UserCollectionItemEdge {
  cursor: String!
  node: UserCollectionItem!
}

input VoteOnAccordInput {
  accordId: Int!
  fragranceId: Int!
  vote: Boolean
}

input VoteOnFragranceInput {
  fragranceId: Int!
  vote: Boolean
}

input VoteOnNoteInput {
  fragranceId: Int!
  layer: NoteLayer!
  noteId: Int!
  vote: Boolean
}

input VoteOnTraitInput {
  fragranceTraitId: Int!
  vote: Float!
}

type VoteSummary {
  dislikesCount: Int!
  likesCount: Int!
  myVote: Boolean
  score: Int!
}