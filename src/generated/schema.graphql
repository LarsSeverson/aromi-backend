type Accord {
  audit: Audit!
  color: String!
  id: Int!
  name: String!
}

type AccordConnection {
  edges: [AccordEdge!]!
  pageInfo: PageInfo!
}

type AccordEdge {
  cursor: String!
  node: Accord!
}

type Asset {
  alt: String
  audit: Audit!
  id: Int!
  src: String!
}

enum AssetStatus {
  FAILED
  PENDING
  UPLOADED
}

type AssetUploadPayload {
  fields: JSON!
  s3Key: String!
  url: String!
}

type Audit {
  createdAt: Date!
  deletedAt: Date
  updatedAt: Date!
}

type AuthPayload {
  accessToken: String!
  expiresIn: Int!
  idToken: String!
}

type CodeDeliveryDetails {
  attribute: String
  destination: String
  method: String
}

input ConfirmFragranceImageInput {
  fragranceId: Int!
  s3Key: String!
}

input ControlledPaginationInput {
  after: String
  first: Int
  sort: ControlledSortByInput
}

input ControlledSortByInput {
  direction: SortDirection = DESCENDING
}

input CreateFragranceCollectionInput {
  name: String!
}

input CreateFragranceCollectionItemInput {
  collectionId: Int!
  fragranceId: Int!
}

input CreateFragranceImageInput {
  fileSize: Int!
  fileType: String!
  fragranceId: Int!
}

input CreateFragranceReportInput {
  fragranceId: Int!
  report: String!
}

input CreateFragranceReviewInput {
  fragranceId: Int!
  rating: Int!
  review: String!
}

input CreateReviewReportInput {
  report: String!
  reviewId: Int!
}

scalar Date

input DeleteFragranceCollectionItemInput {
  collectionId: Int!
  fragranceId: Int!
}

type DeliveryResult {
  complete: Boolean!
  delivery: CodeDeliveryDetails
}

type Fragrance {
  accords(input: VotePaginationInput): FragranceAccordConnection!
  audit: Audit!
  brand: String!
  fillerAccords(input: PaginationInput): FragranceAccordConnection!
  id: Int!
  images(input: PaginationInput): FragranceImageConnection!
  myReview: FragranceReview
  name: String!
  notes: FragranceNotes!
  rating: Float!
  reviewDistribution: FragranceReviewDistribution!
  reviews(input: VotePaginationInput): FragranceReviewConnection!
  reviewsCount: Int!
  traits: [FragranceTrait!]!
  votes: VoteSummary!
}

type FragranceAccord {
  accordId: Int!
  audit: Audit!
  color: String!
  id: Int!
  name: String!
  votes: VoteSummary!
}

type FragranceAccordConnection {
  edges: [FragranceAccordEdge!]!
  pageInfo: PageInfo!
}

type FragranceAccordEdge {
  cursor: String!
  node: FragranceAccord!
}

type FragranceCollection {
  audit: Audit!
  hasFragrance(fragranceId: Int): Boolean!
  id: Int!
  items(input: ControlledPaginationInput): FragranceCollectionItemConnection!
  name: String!
  user: User!
}

type FragranceCollectionConnection {
  edges: [FragranceCollectionEdge!]!
  pageInfo: PageInfo!
}

type FragranceCollectionEdge {
  cursor: String!
  node: FragranceCollection!
}

type FragranceCollectionItem {
  audit: Audit!
  fragrance: Fragrance!
  id: Int!
  rank: Float!
}

type FragranceCollectionItemConnection {
  edges: [FragranceCollectionItemEdge!]!
  pageInfo: PageInfo!
}

type FragranceCollectionItemEdge {
  cursor: String!
  node: FragranceCollectionItem!
}

type FragranceConnection {
  edges: [FragranceEdge!]!
  pageInfo: PageInfo!
}

type FragranceEdge {
  cursor: String!
  node: Fragrance!
}

type FragranceImage {
  alt: String
  audit: Audit!
  bg: String
  height: Int!
  id: Int!
  src: String!
  width: Int!
}

type FragranceImageConnection {
  edges: [FragranceImageEdge!]!
  pageInfo: PageInfo!
}

type FragranceImageEdge {
  cursor: String!
  node: FragranceImage!
}

type FragranceNote {
  audit: Audit!
  id: Int!
  layer: NoteLayer!
  name: String!
  noteId: Int!
  thumbnail: String
  votes: VoteSummary!
}

type FragranceNoteConnection {
  edges: [FragranceNoteEdge!]!
  pageInfo: PageInfo!
}

type FragranceNoteEdge {
  cursor: String!
  node: FragranceNote!
}

type FragranceNotes {
  base(input: VotePaginationInput): FragranceNoteConnection!
  fillerBase(input: PaginationInput): FragranceNoteConnection!
  fillerMiddle(input: PaginationInput): FragranceNoteConnection!
  fillerTop(input: PaginationInput): FragranceNoteConnection!
  middle(input: VotePaginationInput): FragranceNoteConnection!
  top(input: VotePaginationInput): FragranceNoteConnection!
}

type FragranceReport {
  fragrance: Fragrance!
  id: Int!
  report: String!
  user: User!
}

type FragranceReview {
  audit: Audit!
  fragrance: Fragrance!
  id: Int!
  rating: Int!
  text: String!
  user: User!
  votes: VoteSummary!
}

type FragranceReviewConnection {
  edges: [FragranceReviewEdge!]!
  pageInfo: PageInfo!
}

type FragranceReviewDistribution {
  five: Int!
  four: Int!
  one: Int!
  three: Int!
  two: Int!
}

type FragranceReviewEdge {
  cursor: String!
  node: FragranceReview!
}

type FragranceTrait {
  id: Int!
  myVote: Float
  type: FragranceTraitType!
  voteScore: Float!
}

enum FragranceTraitType {
  ALLURE
  BALANCE
  COMPLEXITY
  GENDER
  LONGEVITY
  SILLAGE
}

type FragranceVote {
  audit: Audit!
  fragrance: Fragrance!
  id: Int!
  user: User!
  vote: Int!
}

type FragranceVoteConnection {
  edges: [FragranceVoteEdge!]!
  pageInfo: PageInfo!
}

type FragranceVoteEdge {
  cursor: String!
  node: FragranceVote!
}

type GenericAuthResult {
  complete: Boolean!
}

scalar JSON

input LogFragranceViewInput {
  fragranceId: Int!
}

input MoveFragranceCollectionItemInput {
  collectionId: Int!
  insertBefore: Int!
  rangeLength: Int = 1
  rangeStart: Int!
}

type Mutation {
  confirmForgotPassword(confirmationCode: String!, email: String!, newPassword: String!): GenericAuthResult!
  confirmFragranceImage(input: ConfirmFragranceImageInput!): FragranceImage!
  confirmSignUp(confirmationCode: String!, email: String!): User!
  createFragranceCollection(input: CreateFragranceCollectionInput!): FragranceCollection!
  createFragranceCollectionItem(input: CreateFragranceCollectionItemInput!): FragranceCollectionItem!
  createFragranceImage(input: CreateFragranceImageInput!): AssetUploadPayload!
  createFragranceReport(input: CreateFragranceReportInput!): FragranceReport!
  createFragranceReview(input: CreateFragranceReviewInput!): FragranceReview!
  createReviewReport(input: CreateReviewReportInput!): ReviewReport!
  deleteFragranceCollectionItem(input: DeleteFragranceCollectionItemInput!): [FragranceCollectionItem!]!
  forgotPassword(email: String!): DeliveryResult!
  logFragranceView(input: LogFragranceViewInput!): Boolean!
  logIn(email: String!, password: String!): AuthPayload!
  logOut: Boolean!
  moveFragranceCollectionItem(input: MoveFragranceCollectionItemInput!): [FragranceCollectionItem!]!
  refresh: AuthPayload
  resendSignUpConfirmationCode(email: String!): DeliveryResult!
  signUp(email: String!, password: String!): DeliveryResult!
  voteOnAccord(input: VoteOnAccordInput!): FragranceAccord!
  voteOnFragrance(input: VoteOnFragranceInput!): FragranceVote!
  voteOnNote(input: VoteOnNoteInput!): FragranceNote!
  voteOnReview(input: VoteOnReviewInput!): FragranceReview!
  voteOnTrait(input: VoteOnTraitInput!): FragranceTrait!
}

type Note {
  audit: Audit!
  id: Int!
  name: String
  thumbnail: String
}

type NoteConnection {
  edges: [NoteEdge!]!
  pageInfo: PageInfo!
}

type NoteEdge {
  cursor: String!
  node: Note!
}

enum NoteLayer {
  BASE
  MIDDLE
  TOP
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

input PaginationInput {
  after: String
  first: Int
  sort: SortByInput
}

type Query {
  accords(input: PaginationInput): AccordConnection!
  collection(id: Int!): FragranceCollection!
  fragrance(id: Int!): Fragrance
  fragrances(input: PaginationInput): FragranceConnection!
  me: User
  notes(input: PaginationInput): NoteConnection!
  searchFillerFragranceNotes(input: SearchFragranceNotesInput): FragranceNoteConnection!
  searchFragranceAccords(input: SearchInput): FragranceAccordConnection!
  searchFragranceNotes(input: SearchFragranceNotesInput): FragranceNoteConnection!
  searchFragrances(input: SearchFragrancesInput): FragranceConnection!
  user(id: Int!): User
}

type ReviewReport {
  id: Int!
  report: String!
  review: FragranceReview!
  user: User!
}

input SearchFragranceNotesInput {
  layer: NoteLayer
  pagination: VotePaginationInput
  query: String
}

input SearchFragrancesInput {
  pagination: PaginationInput
  query: String
}

input SearchInput {
  pagination: SearchPaginationInput
  query: String
}

input SearchPaginationInput {
  after: String
  first: Int
  sort: SearchSortByInput
}

enum SearchSortBy {
  RELEVANCE
}

input SearchSortByInput {
  by: SearchSortBy
}

enum SortBy {
  ID
  UPDATED
}

input SortByInput {
  by: SortBy
  direction: SortDirection
}

enum SortDirection {
  ASCENDING
  DESCENDING
}

type User {
  audit: Audit!
  collections(input: PaginationInput): FragranceCollectionConnection!
  email: String!
  followerCount: Int!
  followingCount: Int!
  id: Int!
  likes(input: PaginationInput): FragranceVoteConnection!
  reviews(input: PaginationInput): FragranceReviewConnection!
  username: String!
}

input VoteOnAccordInput {
  accordId: Int!
  fragranceId: Int!
  vote: Boolean
}

input VoteOnFragranceInput {
  fragranceId: Int!
  vote: Boolean
}

input VoteOnNoteInput {
  fragranceId: Int!
  layer: NoteLayer!
  noteId: Int!
  vote: Boolean
}

input VoteOnReviewInput {
  reviewId: Int!
  vote: Boolean
}

input VoteOnTraitInput {
  fragranceTraitId: Int!
  vote: Float!
}

input VotePaginationInput {
  after: String
  first: Int
  sort: VoteSortByInput
}

enum VoteSortBy {
  ID
  UPDATED
  VOTES
}

input VoteSortByInput {
  by: VoteSortBy
  direction: SortDirection
}

type VoteSummary {
  dislikesCount: Int!
  likesCount: Int!
  myVote: Boolean
  voteScore: Int!
}