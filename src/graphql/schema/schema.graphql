type Fragrance @aws_iam @aws_cognito_user_pools {
  id: Int!
  reviewCount: Int!
  likes: Int!
  dislikes: Int!

  rating: Float!
  gender: Float!
  longevity: Float!
  sillage: Float!
  complexity: Float!
  balance: Float!
  allure: Float!

  brand: String!
  name: String!

  accords(limit: Int, offset: Int): [FragranceAccord]
  notes(limit: Int, offset: Int): [FragranceNote]
  images(limit: Int, offset: Int): [FragranceImage]
}

type FragranceTrait @aws_iam @aws_cognito_user_pools {
  id: Int!
  fragranceId: Int!

  averageValue: Float!

  trait: String!
}

type FragranceTraitVote @aws_iam @aws_cognito_user_pools {
  id: Int!
  fragranceId: Int!
  fragranceTraitId: Int!
  userId: Int!

  value: Float!

  trait: String!
}

type FragranceAccord @aws_iam @aws_cognito_user_pools {
  id: Int!
  accordId: Int!
  votes: Int!

  name: String!
  color: String!
}

type FragranceAccordVote @aws_cognito_user_pools {
  id: Int!
  fragranceAccordId: Int!
  userId: Int!

  createdAt: String!
  updatedAt: String!
  deletedAt: String
}

type FragranceNote @aws_iam @aws_cognito_user_pools {
  id: Int!
  noteId: Int!

  name: String!
  layer: String!

  votes: Int!
}

type FragranceNoteVote @aws_cognito_user_pools {
  id: Int!
  fragranceNoteId: Int!
  userId: Int!

  createdAt: String!
  updatedAt: String!
  deletedAt: String
}

type FragranceImage @aws_iam @aws_cognito_user_pools {
  imageId: Int!

  s3Key: String!
}

enum FragranceTraitType {
  gender
  longevity
  sillage
  complexity
  balance
  allure
}

enum NoteLayer {
  top
  middle
  base
  fill
}

type User @aws_iam @aws_cognito_user_pools {
  id: Int!

  username: String!
  email: String!
  cognitoId: String!
}

type Query {
  fragrance(id: Int!): Fragrance @aws_iam @aws_cognito_user_pools

  fragranceTraits(id: Int!): [FragranceTrait] @aws_iam @aws_cognito_user_pools
  fragranceTraitVotes(fragranceId: Int!): [FragranceTraitVote]

  fragranceAccords(
    id: Int!
    name: String
    limit: Int
    offset: Int
  ): [FragranceAccord] @aws_iam @aws_cognito_user_pools

  fragranceNotes(
    id: Int!
    layer: NoteLayer!
    name: String
    limit: Int
    offset: Int
    fill: Boolean
  ): [FragranceNote] @aws_iam @aws_cognito_user_pools

  fragranceAccordUserVotes(
    userId: Int!
    fragranceAccordIds: [Int]!
    limit: Int
    offset: Int
  ): [FragranceAccordVote]

  fragranceNoteUserVotes(
    userId: Int!
    fragranceNoteIds: [Int]!
    limit: Int
    offset: Int
  ): [FragranceNoteVote]

  fragranceImages(id: Int!, limit: Int, offset: Int): [FragranceImage] @aws_iam @aws_cognito_user_pools

  fragrances(limit: Int, offset: Int): [Fragrance] @aws_iam @aws_cognito_user_pools
  suggestedFragrances(limit: Int): [Fragrance] @aws_iam @aws_cognito_user_pools

  user(id: Int, cognitoId: String): User
}

type Mutation {
  createUser(cognitoId: String!, email: String!): User

  voteOnAccord(fragranceId: Int!, accordId: Int!): FragranceAccordVote

  voteOnNote(fragranceId: Int!, noteId: Int!, layer: NoteLayer!): FragranceNoteVote

  voteOnTrait(fragranceId: Int!, trait: FragranceTraitType!, value: Float!): FragranceTraitVote
}
