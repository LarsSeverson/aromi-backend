type Fragrance {
  id: Int!
  brand: String!
  name: String!
  rating: Float!
  reviewsCount: Int!

  votes: FragranceVotes!

  traits: FragranceTraits!

  notes: FragranceNotes!
  accords(input: AccordsInput): FragranceAccordConnection! 
  images(input: QueryInput): FragranceImageConnection!

  reviews(input: QueryInput): FragranceReviewConnection!
  myReview: FragranceReview
  reviewDistribution: FragranceReviewDistribution!

  dCreated: Date!
  dModified: Date!
}

type FragranceVotes {
  id: Int!
  likes: Int!
  dislikes: Int!
  myVote: Boolean
}

type FragranceTraits {
  fragranceId: Int!
  gender: FragranceTrait!
  longevity: FragranceTrait!
  sillage: FragranceTrait!
  complexity: FragranceTrait!
  balance: FragranceTrait!
  allure: FragranceTrait!
}

type FragranceTrait {
  id: Int!
  trait: FragranceTraitType!
  value: Float!
  myVote: Float
}

type FragranceNotes {
  fragranceId: Int!
  top(input: NotesInput): FragranceNoteConnection! 
  middle(input: NotesInput): FragranceNoteConnection!
  base(input: NotesInput): FragranceNoteConnection!
}

type FragranceNote {
  id: Int!
  noteId: Int!
  name: String!
  layer: NoteLayer!
  icon: String!
  votes: Int!
  myVote: Boolean
}

type FragranceAccord {
  id: Int!
  accordId: Int!
  name: String!
  color: String!
  votes: Int!
  myVote: Boolean
}

type FragranceImage {
  id: Int!
  url: String!
}

type FragranceReview {
  id: Int!
  rating: Int!
  review: String!
  votes: Int!
  dCreated: Date!
  dModified: Date!
  dDeleted: Date

  user: User!
  fragrance: Fragrance!
  myVote: Boolean
}

type FragranceReviewDistribution {
  one: Int!
  two: Int!
  three: Int!
  four: Int!
  five: Int!
}

type FragranceCollection {
  id: Int!
  name: String!
  items(input: QueryInput): FragranceCollectionItemConnection! 
  user: User!
  dCreated: Date!
  dModified: Date!
}

type FragranceCollectionItem {
  id: Int!
  fragrance: Fragrance!
  collection: FragranceCollection!
  dCreated: Date!
  dModified: Date!
}

extend type Query {
  fragrance(id: Int!): Fragrance
  fragrances(input: QueryInput): FragranceConnection!

  collection(id: Int!): FragranceCollection
}

extend type Mutation {
  voteOnFragrance(fragranceId: Int!, myVote: Boolean): FragranceVotes
  voteOnTrait(fragranceId: Int!, trait: FragranceTraitType!, myVote: Float!): FragranceTrait
  voteOnAccord(fragranceId: Int!, accordId: Int!, myVote: Boolean!): FragranceAccord
  voteOnNote(fragranceId: Int!, noteId: Int!, layer: NoteLayer!, myVote: Boolean!): FragranceNote
  voteOnReview(reviewId: Int!, myVote: Boolean): FragranceReview
  reviewFragrance(fragranceId: Int!, myRating: Int!, myReview: String!): FragranceReview

  addFragranceToCollection(collectionId: Int!, fragranceId: Int!): FragranceCollection
  removeFragranceFromCollection(collectionId: Int!, fragranceId: Int!): FragranceCollection
}

enum FragranceTraitType {
  gender
  longevity
  sillage
  complexity
  balance
  allure
}

enum NoteLayer {
  top
  middle
  base
}

input AccordsInput {
  pagination: PaginationInput
  fill: Boolean
}

input NotesInput {
  pagination: PaginationInput
  fill: Boolean
}

type FragranceEdge {
  cursor: String!
  node: Fragrance!
}

type FragranceConnection {
  edges: [FragranceEdge!]!
  pageInfo: PageInfo!
}

type FragranceImageEdge {
  cursor: String!
  node: FragranceImage!
}

type FragranceImageConnection {
  edges: [FragranceImageEdge!]!
  pageInfo: PageInfo!
}

type FragranceAccordEdge {
  cursor: String!
  node: FragranceAccord!
}

type FragranceAccordConnection {
  edges: [FragranceAccordEdge!]!
  pageInfo: PageInfo!
}

type FragranceNoteEdge {
  cursor: String!
  node: FragranceNote!
}

type FragranceNoteConnection {
  edges: [FragranceNoteEdge!]!
  pageInfo: PageInfo!
}

type FragranceReviewEdge {
  cursor: String!
  node: FragranceReview!
}

type FragranceReviewConnection {
  edges: [FragranceReviewEdge!]!
  pageInfo: PageInfo!
}

type FragranceCollectionEdge {
  cursor: String!
  node: FragranceCollection!
}

type FragranceCollectionConnection {
  edges: [FragranceCollectionEdge!]!
  pageInfo: PageInfo!
}

type FragranceCollectionItemEdge {
  cursor: String!
  node: FragranceCollectionItem!
}

type FragranceCollectionItemConnection {
  edges: [FragranceCollectionItemEdge!]!
  pageInfo: PageInfo!
}