/**
 * This file was generated by kysely-codegen.
 * Please do not edit it manually.
 */

import type { ColumnType } from "kysely";

export type FragranceTraitEnum = "allure" | "balance" | "complexity" | "gender" | "longevity" | "sillage";

export type Generated<T> = T extends ColumnType<infer S, infer I, infer U>
  ? ColumnType<S, I | undefined, U>
  : ColumnType<T, T | undefined, T>;

export type Json = JsonValue;

export type JsonArray = JsonValue[];

export type JsonObject = {
  [x: string]: JsonValue | undefined;
};

export type JsonPrimitive = boolean | number | string | null;

export type JsonValue = JsonArray | JsonObject | JsonPrimitive;

export type NoteLayerEnum = "base" | "middle" | "top";

export type Numeric = ColumnType<string, number | string, number | string>;

export type Timestamp = ColumnType<string, string, string>;

export type UploadStatus = "failed" | "pending" | "uploaded";

export interface Accord {
  color: Generated<string>;
  createdAt: Timestamp;
  deletedAt: Timestamp | null;
  id: Generated<number>;
  name: string;
  updatedAt: Timestamp;
}

export interface FragranceAccord {
  accordId: number;
  createdAt: Generated<Timestamp>;
  deletedAt: Timestamp | null;
  dislikesCount: Generated<number>;
  fragranceId: number;
  id: Generated<number>;
  likesCount: Generated<number>;
  updatedAt: Generated<Timestamp>;
  voteScore: Generated<number>;
}

export interface FragranceAccordVote {
  createdAt: Generated<Timestamp | null>;
  deletedAt: Timestamp | null;
  fragranceAccordId: number;
  id: Generated<number>;
  updatedAt: Generated<Timestamp | null>;
  userId: number;
  vote: number;
}

export interface FragranceCollectionEvent {
  collectionId: string;
  createdAt: Generated<Timestamp | null>;
  operationType: string | null;
  payload: Json | null;
  revisionId: Generated<number>;
}

export interface FragranceCollectionItem {
  collectionId: number;
  createdAt: Generated<Timestamp>;
  deletedAt: Timestamp | null;
  fragranceId: number;
  id: Generated<number>;
  rank: Numeric;
  updatedAt: Generated<Timestamp>;
}

export interface FragranceCollection {
  createdAt: Generated<Timestamp>;
  deletedAt: Timestamp | null;
  id: Generated<number>;
  name: string;
  updatedAt: Generated<Timestamp>;
  userId: number;
}

export interface FragranceImage {
  createdAt: Generated<Timestamp>;
  deletedAt: Timestamp | null;
  fragranceId: number;
  height: Generated<number>;
  id: Generated<number>;
  primaryColor: string | null;
  s3Key: string;
  status: Generated<UploadStatus | null>;
  updatedAt: Generated<Timestamp>;
  width: Generated<number>;
}

export interface FragranceNote {
  createdAt: Generated<Timestamp>;
  deletedAt: Timestamp | null;
  dislikesCount: Generated<number>;
  fragranceId: number;
  id: Generated<number>;
  layer: NoteLayerEnum;
  likesCount: Generated<number>;
  noteId: number;
  updatedAt: Generated<Timestamp>;
  voteScore: Generated<number>;
}

export interface FragranceNoteVote {
  createdAt: Generated<Timestamp | null>;
  deletedAt: Timestamp | null;
  fragranceNoteId: number;
  id: Generated<number>;
  updatedAt: Generated<Timestamp | null>;
  userId: number;
  vote: number;
}

export interface FragranceReport {
  createdAt: Generated<Timestamp>;
  deletedAt: Timestamp | null;
  fragranceId: number;
  id: Generated<number>;
  report: string;
  updatedAt: Generated<Timestamp>;
  userId: number;
}

export interface FragranceReview {
  createdAt: Generated<Timestamp>;
  deletedAt: Timestamp | null;
  dislikesCount: Generated<number>;
  fragranceId: number;
  id: Generated<number>;
  likesCount: Generated<number>;
  rating: number;
  reviewText: string;
  updatedAt: Generated<Timestamp>;
  userId: number;
  voteScore: Generated<number>;
}

export interface FragranceReviewVote {
  createdAt: Generated<Timestamp | null>;
  deletedAt: Timestamp | null;
  fragranceReviewId: number;
  id: Generated<number>;
  updatedAt: Generated<Timestamp | null>;
  userId: number;
  vote: number;
}

export interface Fragrance {
  brand: string;
  createdAt: Timestamp;
  deletedAt: Timestamp | null;
  dislikesCount: number;
  id: Generated<number>;
  likesCount: number;
  name: string;
  rating: number | null;
  reviewsCount: number;
  updatedAt: Timestamp;
  voteScore: Generated<number>;
}

export interface FragranceTrait {
  createdAt: Timestamp;
  deletedAt: Timestamp | null;
  fragranceId: number;
  id: Generated<number>;
  trait: FragranceTraitEnum;
  updatedAt: Timestamp;
  voteScore: Generated<number>;
}

export interface FragranceTraitVote {
  createdAt: Generated<Timestamp>;
  deletedAt: Timestamp | null;
  fragranceTraitId: number;
  id: Generated<number>;
  updatedAt: Generated<Timestamp>;
  userId: number;
  vote: number;
}

export interface FragranceView {
  fragranceId: number;
  id: Generated<number>;
  userId: number;
  viewedAt: Generated<Timestamp | null>;
}

export interface FragranceVote {
  createdAt: Generated<Timestamp>;
  deletedAt: Timestamp | null;
  fragranceId: number;
  id: Generated<number>;
  updatedAt: Generated<Timestamp>;
  userId: number;
  vote: number;
}

export interface Note {
  createdAt: Timestamp;
  deletedAt: Timestamp | null;
  id: Generated<number>;
  name: string;
  s3Key: Generated<string>;
  updatedAt: Timestamp;
}

export interface User {
  cognitoId: string;
  createdAt: Generated<Timestamp>;
  deletedAt: Timestamp | null;
  email: string;
  followerCount: Generated<number>;
  followingCount: Generated<number>;
  id: Generated<number>;
  updatedAt: Generated<Timestamp>;
  username: string | null;
}

export interface DB {
  accords: Accord;
  fragranceAccords: FragranceAccord;
  fragranceAccordVotes: FragranceAccordVote;
  fragranceCollectionEvents: FragranceCollectionEvent;
  fragranceCollectionItems: FragranceCollectionItem;
  fragranceCollections: FragranceCollection;
  fragranceImages: FragranceImage;
  fragranceNotes: FragranceNote;
  fragranceNoteVotes: FragranceNoteVote;
  fragranceReports: FragranceReport;
  fragranceReviews: FragranceReview;
  fragranceReviewVotes: FragranceReviewVote;
  fragrances: Fragrance;
  fragranceTraits: FragranceTrait;
  fragranceTraitVotes: FragranceTraitVote;
  fragranceViews: FragranceView;
  fragranceVotes: FragranceVote;
  notes: Note;
  users: User;
}
