/**
 * This file was generated by kysely-codegen.
 * Please do not edit it manually.
 */

import type { ColumnType } from "kysely";

export type AssetStatus = "ready" | "staged";

export type AvatarStatus = "FAILED" | "PENDING" | "PROCESSING" | "READY";

export type Generated<T> = T extends ColumnType<infer S, infer I, infer U>
  ? ColumnType<S, I | undefined, U>
  : ColumnType<T, T | undefined, T>;

export type Int8 = ColumnType<string, bigint | number | string, bigint | number | string>;

export type NoteLayerEnum = "base" | "middle" | "top";

export type Timestamp = ColumnType<string, string, string>;

export interface Accord {
  color: Generated<string>;
  createdAt: Timestamp;
  deletedAt: Timestamp | null;
  id: Generated<string>;
  name: string;
  oldId: number;
  updatedAt: Timestamp;
}

export interface FragranceAccord {
  accordId: string;
  createdAt: Generated<Timestamp>;
  deletedAt: Timestamp | null;
  dislikesCount: Generated<number>;
  fragranceId: string;
  id: Generated<string>;
  likesCount: Generated<number>;
  updatedAt: Generated<Timestamp>;
  voteScore: Generated<number>;
}

export interface FragranceAccordVote {
  createdAt: Generated<Timestamp | null>;
  deletedAt: Timestamp | null;
  fragranceAccordId: string;
  id: Generated<string>;
  updatedAt: Generated<Timestamp | null>;
  userId: string;
  vote: number;
}

export interface FragranceCollection {
  createdAt: Generated<Timestamp>;
  deletedAt: Timestamp | null;
  id: Generated<string>;
  name: string;
  updatedAt: Generated<Timestamp>;
  userId: string;
}

export interface FragranceDraftAccord {
  accordId: string;
  createdAt: Generated<Timestamp>;
  deletedAt: Timestamp | null;
  draftId: string;
  id: Generated<string>;
}

export interface FragranceDraftImage {
  contentType: string;
  createdAt: Generated<Timestamp>;
  deletedAt: Timestamp | null;
  draftId: string;
  id: Generated<string>;
  name: string;
  s3Key: string;
  sizeBytes: Int8;
  status: Generated<AssetStatus>;
}

export interface FragranceDraft {
  concentration: Generated<string | null>;
  createdAt: Generated<Timestamp>;
  deletedAt: Timestamp | null;
  description: string | null;
  fragranceStatus: Generated<string | null>;
  id: Generated<string>;
  name: string | null;
  releaseYear: number | null;
  updatedAt: Generated<Timestamp>;
  userId: string;
  version: Generated<number>;
}

export interface FragranceDraftTrait {
  draftId: string;
  id: Generated<string>;
  traitOptionId: string | null;
  traitTypeId: string;
}

export interface FragranceImage {
  createdAt: Generated<Timestamp>;
  deletedAt: Timestamp | null;
  fragranceId: string;
  height: Generated<number>;
  id: Generated<string>;
  oldS3Key: string;
  primaryColor: string | null;
  s3Key: string;
  updatedAt: Generated<Timestamp>;
  url: string | null;
  width: Generated<number>;
}

export interface FragranceNote {
  createdAt: Generated<Timestamp>;
  deletedAt: Timestamp | null;
  dislikesCount: Generated<number>;
  fragranceId: string;
  id: Generated<string>;
  layer: NoteLayerEnum;
  likesCount: Generated<number>;
  noteId: string;
  updatedAt: Generated<Timestamp>;
  voteScore: Generated<number>;
}

export interface FragranceNoteVote {
  createdAt: Generated<Timestamp | null>;
  deletedAt: Timestamp | null;
  fragranceNoteId: string;
  id: Generated<string>;
  updatedAt: Generated<Timestamp | null>;
  userId: string;
  vote: number;
}

export interface Fragrance {
  brand: string;
  createdAt: Timestamp;
  deletedAt: Timestamp | null;
  dislikesCount: number;
  id: Generated<string>;
  likesCount: number;
  name: string;
  oldId: number;
  rating: number | null;
  reviewsCount: number;
  updatedAt: Timestamp;
  voteScore: Generated<number>;
}

export interface FragranceTraitVote {
  createdAt: Generated<Timestamp>;
  deletedAt: Timestamp | null;
  fragranceId: string;
  id: Generated<string>;
  traitOptionId: string;
  traitTypeId: string;
  userId: string;
}

export interface Note {
  createdAt: Generated<Timestamp>;
  deletedAt: Timestamp | null;
  id: Generated<string>;
  name: string;
  oldId: number;
  s3Key: string | null;
  thumbnailS3Key: string;
  thumbnailUrl: string;
  updatedAt: Generated<Timestamp>;
}

export interface TraitOption {
  id: Generated<string>;
  label: string;
  score: number;
  traitTypeId: string;
}

export interface TraitType {
  id: Generated<string>;
  name: string;
}

export interface User {
  avatarError: string | null;
  avatarS3Key: string | null;
  avatarStatus: Generated<AvatarStatus>;
  avatarUpdatedAt: Generated<Timestamp>;
  avatarUrl: string | null;
  cognitoSub: string;
  createdAt: Generated<Timestamp>;
  deletedAt: Timestamp | null;
  email: string;
  id: Generated<string>;
  updatedAt: Generated<Timestamp>;
  username: string;
}

export interface DB {
  accords: Accord;
  fragranceAccords: FragranceAccord;
  fragranceAccordVotes: FragranceAccordVote;
  fragranceCollections: FragranceCollection;
  fragranceDraftAccords: FragranceDraftAccord;
  fragranceDraftImages: FragranceDraftImage;
  fragranceDrafts: FragranceDraft;
  fragranceDraftTraits: FragranceDraftTrait;
  fragranceImages: FragranceImage;
  fragranceNotes: FragranceNote;
  fragranceNoteVotes: FragranceNoteVote;
  fragrances: Fragrance;
  fragranceTraitVotes: FragranceTraitVote;
  notes: Note;
  traitOptions: TraitOption;
  traitTypes: TraitType;
  users: User;
}
