type BrandRequest {
  id: ID!
  version: Int!
  requestStatus: RequestStatus!

  name: String
  description: String
  website: String

  image: BrandRequestImage

  votes: VoteInfo!

  user: User!
}

type BrandRequestEdge {
  node: BrandRequest!
  cursor: String!
}

type BrandRequestConnection {
  edges: [BrandRequestEdge!]!
  pageInfo: PageInfo!
}

input CreateBrandRequestInput {
  name: String
  description: String
  website: String
}

input UpdateBrandRequestInput {
  id: ID!
  version: Int!
  name: String
  description: String
  website: String
}

input DeleteBrandRequestInput {
  id: ID!
}

input SubmitBrandRequestInput {
  id: ID!
}

extend type Query {
  brandRequest(id: ID!): BrandRequest!
  brandRequests(input: RequestPaginationInput): BrandRequestConnection!
}

extend type Mutation {
  createBrandRequest(input: CreateBrandRequestInput!): BrandRequest!
  updateBrandRequest(input: UpdateBrandRequestInput!): BrandRequest!
  deleteBrandRequest(input: DeleteBrandRequestInput!): BrandRequest!

  submitBrandRequest(input: SubmitBrandRequestInput!): BrandRequest!
}
