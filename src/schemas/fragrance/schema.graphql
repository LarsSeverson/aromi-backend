type Fragrance {
  id: Int!
  brand: String!
  name: String!
  rating: Float!
  reviewsCount: Int!

  votes: VoteSummary!

  images(input: PaginationInput): FragranceImageConnection!

  accords(input: VotePaginationInput): FragranceAccordConnection!
  fillerAccords(input: PaginationInput): FragranceAccordConnection!

  traits: [FragranceTrait!]!

  notes: FragranceNotes!

  reviews(input: VotePaginationInput): FragranceReviewConnection!
  reviewDistribution: FragranceReviewDistribution!
  myReview: FragranceReview

  audit: Audit!
}

type FragranceTrait {
  id: Int!
  type: FragranceTraitType!
  voteScore: Float!
  myVote: Float
}

type FragranceImage {
  id: Int!
  src: String!
  alt: String
  bg: String
  width: Int!
  height: Int!
  audit: Audit!
}

type FragranceNotes {
  top(input: VotePaginationInput): FragranceNoteConnection!
  fillerTop(input: PaginationInput): FragranceNoteConnection!

  middle(input: VotePaginationInput): FragranceNoteConnection!
  fillerMiddle(input: PaginationInput): FragranceNoteConnection!

  base(input: VotePaginationInput): FragranceNoteConnection!
  fillerBase(input: PaginationInput): FragranceNoteConnection!
}

type FragranceNote {
  id: Int!
  noteId: Int!
  name: String!
  layer: NoteLayer!
  votes: VoteSummary!
  audit: Audit!
  thumbnail: String
}

type FragranceAccord {
  id: Int!
  accordId: Int!
  name: String!
  color: String!
  votes: VoteSummary!
  audit: Audit!
}

type FragranceReview {
  id: Int!
  rating: Int!
  text: String!
  votes: VoteSummary!
  user: User!
  fragrance: Fragrance!
  audit: Audit!
}

type FragranceReviewDistribution {
  one: Int!
  two: Int!
  three: Int!
  four: Int!
  five: Int!
}

type FragranceCollection {
  id: Int!
  name: String!
  user: User!
  items(input: ControlledPaginationInput): FragranceCollectionItemConnection!
  audit: Audit!

  hasFragrance(fragranceId: Int): Boolean!
}

type FragranceCollectionItem {
  id: Int!
  rank: Float!
  fragrance: Fragrance!
  audit: Audit!
}

type FragranceVote {
  id: Int!
  vote: Int!
  user: User!
  fragrance: Fragrance!
  audit: Audit!
}

type FragranceReport {
  id: Int!
  report: String!
  fragrance: Fragrance!
  user: User!
}

type ReviewReport {
  id: Int!
  report: String!
  review: FragranceReview!
  user: User!
}

extend type Query {
  fragrance(id: Int!): Fragrance
  fragrances(input: PaginationInput): FragranceConnection!
  collection(id: Int!): FragranceCollection!

  searchFragrances(input: SearchFragrancesInput): FragranceConnection!

  searchFragranceAccords(input: SearchInput): FragranceAccordConnection!

  searchFragranceNotes(
    input: SearchFragranceNotesInput
  ): FragranceNoteConnection!

  searchFillerFragranceNotes(
    input: SearchFragranceNotesInput
  ): FragranceNoteConnection!
}

extend type Mutation {
  createFragranceReview(input: CreateFragranceReviewInput!): FragranceReview!

  createFragranceCollection(
    input: CreateFragranceCollectionInput!
  ): FragranceCollection!

  createFragranceImage(input: CreateFragranceImageInput!): AssetUploadPayload!
  confirmFragranceImage(input: ConfirmFragranceImageInput!): FragranceImage!

  createFragranceCollectionItem(
    input: CreateFragranceCollectionItemInput!
  ): FragranceCollectionItem!

  deleteFragranceCollectionItem(
    input: DeleteFragranceCollectionItemInput!
  ): [FragranceCollectionItem!]!

  moveFragranceCollectionItem(
    input: MoveFragranceCollectionItemInput!
  ): [FragranceCollectionItem!]!

  createFragranceReport(input: CreateFragranceReportInput!): FragranceReport!

  createReviewReport(input: CreateReviewReportInput!): ReviewReport!

  voteOnFragrance(input: VoteOnFragranceInput!): FragranceVote!
  voteOnTrait(input: VoteOnTraitInput!): FragranceTrait!
  voteOnAccord(input: VoteOnAccordInput!): FragranceAccord!
  voteOnNote(input: VoteOnNoteInput!): FragranceNote!
  voteOnReview(input: VoteOnReviewInput!): FragranceReview!

  logFragranceView(input: LogFragranceViewInput!): Boolean!
}

enum FragranceTraitType {
  GENDER
  LONGEVITY
  SILLAGE
  COMPLEXITY
  BALANCE
  ALLURE
}

enum NoteLayer {
  TOP
  MIDDLE
  BASE
}

input CreateFragranceReviewInput {
  fragranceId: Int!
  rating: Int!
  review: String!
}

input CreateFragranceCollectionInput {
  name: String!
}

input CreateFragranceCollectionItemInput {
  collectionId: Int!
  fragranceId: Int!
}

input CreateFragranceImageInput {
  fragranceId: Int!
  fileType: String!
  fileSize: Int!
}

input ConfirmFragranceImageInput {
  fragranceId: Int!
  s3Key: String!
}

input DeleteFragranceCollectionItemInput {
  collectionId: Int!
  fragranceId: Int!
}

input MoveFragranceCollectionItemInput {
  collectionId: Int!
  insertBefore: Int!
  rangeStart: Int!
  rangeLength: Int = 1
}

input CreateFragranceReportInput {
  fragranceId: Int!
  report: String!
}

input CreateReviewReportInput {
  reviewId: Int!
  report: String!
}

input VoteOnFragranceInput {
  fragranceId: Int!
  vote: Boolean
}

input VoteOnTraitInput {
  fragranceTraitId: Int!
  vote: Float!
}

input VoteOnAccordInput {
  fragranceId: Int!
  accordId: Int!
  vote: Boolean
}

input VoteOnNoteInput {
  fragranceId: Int!
  noteId: Int!
  layer: NoteLayer!
  vote: Boolean
}

input VoteOnReviewInput {
  reviewId: Int!
  vote: Boolean
}

input LogFragranceViewInput {
  fragranceId: Int!
}

# Query input
input SearchInput {
  query: String
  pagination: SearchPaginationInput
}

input SearchFragrancesInput {
  query: String
  pagination: PaginationInput
}

input SearchFragranceNotesInput {
  query: String
  layer: NoteLayer
  pagination: VotePaginationInput
}

# Fragrance
type FragranceEdge {
  cursor: String!
  node: Fragrance!
}

type FragranceConnection {
  edges: [FragranceEdge!]!
  pageInfo: PageInfo!
}

# Images
type FragranceImageEdge {
  cursor: String!
  node: FragranceImage!
}

type FragranceImageConnection {
  edges: [FragranceImageEdge!]!
  pageInfo: PageInfo!
}

# Accords
type FragranceAccordEdge {
  cursor: String!
  node: FragranceAccord!
}

type FragranceAccordConnection {
  edges: [FragranceAccordEdge!]!
  pageInfo: PageInfo!
}

# Notes
type FragranceNoteEdge {
  cursor: String!
  node: FragranceNote!
}

type FragranceNoteConnection {
  edges: [FragranceNoteEdge!]!
  pageInfo: PageInfo!
}

# Review
type FragranceReviewEdge {
  cursor: String!
  node: FragranceReview!
}

type FragranceReviewConnection {
  edges: [FragranceReviewEdge!]!
  pageInfo: PageInfo!
}

# Collection
type FragranceCollectionConnection {
  edges: [FragranceCollectionEdge!]!
  pageInfo: PageInfo!
}

type FragranceCollectionEdge {
  cursor: String!
  node: FragranceCollection!
}

type FragranceCollectionItemConnection {
  edges: [FragranceCollectionItemEdge!]!
  pageInfo: PageInfo!
}

type FragranceCollectionItemEdge {
  cursor: String!
  node: FragranceCollectionItem!
}

# Vote
type FragranceVoteConnection {
  edges: [FragranceVoteEdge!]!
  pageInfo: PageInfo!
}

type FragranceVoteEdge {
  cursor: String!
  node: FragranceVote!
}
