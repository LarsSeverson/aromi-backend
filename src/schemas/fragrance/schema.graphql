type Fragrance {
  id: Int!
  brand: String!
  name: String!
  rating: Float!
  reviewsCount: Int!

  votes: VoteSummary!

  traits: [FragranceTrait!]!

  notes: FragranceNotes!
  accords(input: AccordsInput): FragranceAccordConnection!
  images(input: PaginationInput): FragranceImageConnection!
  reviews(input: PaginationInput): FragranceReviewConnection!
  reviewDistribution: FragranceReviewDistribution!

  myReview: FragranceReview
  audit: Audit!
}

type FragranceTrait {
  type: FragranceTraitType!
  score: Float!
  myVote: Float
}

type FragranceImage {
  id: Int!
  src: String!
  alt: String
  audit: Audit!
}

type FragranceNotes {
  top(input: NotesInput): FragranceNoteConnection!
  middle(input: NotesInput): FragranceNoteConnection!
  base(input: NotesInput): FragranceNoteConnection!
}

type FragranceNote {
  id: Int!
  noteId: Int!
  name: String!
  layer: NoteLayer!
  votes: VoteSummary!
  audit: Audit!
  isFill: Boolean!
}

type FragranceAccord {
  id: Int!
  accordId: Int!
  name: String!
  color: String!
  votes: VoteSummary!
  audit: Audit!
  isFill: Boolean!
}

type FragranceReview {
  id: Int!
  rating: Int!
  text: String!
  votes: VoteSummary!
  user: User!
  audit: Audit!
}

type FragranceReviewDistribution {
  one: Int!
  two: Int!
  three: Int!
  four: Int!
  five: Int!
}

extend type Query {
  fragrance(id: Int!): Fragrance
  fragrances(input: PaginationInput): FragranceConnection!
}

extend type Mutation {
  voteOnFragrance(input: VoteOnFragranceInput!): Fragrance!
  voteOnTrait(input: VoteOnTraitInput!): FragranceTrait!
  voteOnAccord(input: VoteOnAccordInput!): FragranceAccord!
  voteOnNote(input: VoteOnNoteInput!): FragranceNote!
}

enum FragranceTraitType {
  GENDER
  LONGEVITY
  SILLAGE
  COMPLEXITY
  BALANCE
  ALLURE
}

enum NoteLayer {
  TOP
  MIDDLE
  BASE
}

# Inputs
input AccordsInput {
  pagination: PaginationInput
  fill: Boolean
}

input NotesInput {
  pagination: PaginationInput
  fill: Boolean
}

input VoteOnFragranceInput {
  fragranceId: Int!
  vote: Boolean
}

input VoteOnTraitInput {
  fragranceTraitId: Int!
  vote: Float!
}

input VoteOnAccordInput {
  fragranceId: Int!
  accordId: Int!
  vote: Boolean
}

input VoteOnNoteInput {
  fragranceId: Int!
  noteId: Int!
  layer: NoteLayer!
  vote: Boolean
}

# Pagination
# Fragrance
type FragranceEdge {
  cursor: String!
  node: Fragrance!
}

type FragranceConnection {
  edges: [FragranceEdge!]!
  pageInfo: PageInfo!
}

# Images
type FragranceImageEdge {
  cursor: String!
  node: FragranceImage!
}

type FragranceImageConnection {
  edges: [FragranceImageEdge!]!
  pageInfo: PageInfo!
}

# Accords
type FragranceAccordEdge {
  cursor: String!
  node: FragranceAccord!
}

type FragranceAccordConnection {
  edges: [FragranceAccordEdge!]!
  pageInfo: PageInfo!
}

# Notes
type FragranceNoteEdge {
  cursor: String!
  node: FragranceNote!
}

type FragranceNoteConnection {
  edges: [FragranceNoteEdge!]!
  pageInfo: PageInfo!
}

# Review
type FragranceReviewEdge {
  cursor: String!
  node: FragranceReview!
}

type FragranceReviewConnection {
  edges: [FragranceReviewEdge!]!
  pageInfo: PageInfo!
}
