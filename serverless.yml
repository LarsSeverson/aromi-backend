org: aromi
app: aromi-mobile
service: aromi-backend

provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-2

package:
  individually: true
  exclude:
    - node_modules/**
    - .git/**
    - .vscode/**

plugins:
  - serverless-appsync-plugin
  - serverless-dotenv-plugin

resources:
  Resources:
    aromiDBServiceRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: appsync.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: AppSyncRDSAccess
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - rds-data:*
                    - secretsmanager:GetSecretValue
                    - ssm:GetParameter
                  Resource: "*"

appSync:
  name: aromiAppSyncAPI

  authentication:
    type: API_KEY

  apiKeys:
    - name: defaultKey
      description: Default API key for testing
      expiresAfter: 1M

  schema:
    - src/schema/schema.graphql

  dataSources:
    aromiDB:
      type: "RELATIONAL_DATABASE"
      config:
        dbClusterIdentifier: ${env:DB_CLUSTER}
        databaseName: ${env:DB_NAME}
        region: ${env:DB_REGION}
        awsSecretStoreArn: ${ssm:/aromi/rds-secret-arn}
        serviceRoleArn: !GetAtt aromiDBServiceRole.Arn
  
  pipelineFunctions:
    getFragranceByID:
      dataSource: aromiDB
      description: Get a fragrance by its ID
      request: src/resolvers/queries/fragrance/request.vtl
      response: src/resolvers/queries/fragrance/response.vtl
    
    getFragranceAccordsAndNotes:
      dataSource: aromiDB
      description: Gets the accords and notes associated with the fragrance using the fragrance ID
      request: src/resolvers/queries/getFragranceAccordsAndNotes/request.vtl
      response: src/resolvers/queries/getFragranceAccordsAndNotes/response.vtl

  resolvers:
    Query.fragrances:
      kind: UNIT
      dataSource: aromiDB
      request: src/resolvers/queries/fragrances/request.vtl 
      response: src/resolvers/queries/fragrances/response.vtl
    
    Query.fragrance:
      kind: PIPELINE
      dataSource: aromiDB
      request: src/resolvers/queries/fragrance/initialRequest.vtl
      functions:
        - getFragranceByID
      response: src/resolvers/queries/fragrance/finalResponse.vtl

  logging:
    level: ALL
    retentionInDays: 7

  esbuild:
    target: 'esnext'

useDotenv: true
