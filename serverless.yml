org: aromi
app: aromi-mobile
service: aromi-backend

provider:
  name: aws
  region: us-east-2
  runtime: nodejs20.x
  environment:
    S3_BUCKET: ${env:S3_BUCKET}

functions:
  graphql:
    handler: handler.graphql
    events:
      - http:
          path: graphql
          method: post
          cors: true
      - http:
          path: graphql
          method: get
          cors: true

package:
  individually: true
  exclude:
    - node_modules/**
    - .git/**
    - .vscode/**

plugins:
  - serverless-dotenv-plugin
  - serverless-offline

build:
  esbuild: true

resources:
  Resources:
    aromiDBServiceRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: appsync.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: AppSyncRDSAccess
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - rds-data:*
                    - secretsmanager:GetSecretValue
                    - ssm:GetParameter
                  Resource: "*"

    aromiSES:
      Type: AWS::SES::EmailIdentity
      Properties:
        EmailIdentity: "aromi.io"

    cognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UsernameAttributes:
          - "email"
          - "phone_number"
        UserPoolName: aromiUserPool
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireUppercase: false
            RequireLowercase: false
            RequireNumbers: true
            RequireSymbols: false
            TemporaryPasswordValidityDays: 7
        EmailConfiguration:
          EmailSendingAccount: DEVELOPER
          SourceArn: arn:aws:ses:us-east-2:490004620452:identity/donotreply@aromi.io
        VerificationMessageTemplate:
          DefaultEmailOption: CONFIRM_WITH_CODE
          EmailSubject: "Your confirmation code"
          EmailMessage: "Your confirmation code is {####}"

    cognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: aromiClient
        UserPoolId: !Ref cognitoUserPool

    cognitoUserGroup:
      Type: AWS::Cognito::UserPoolGroup
      Properties:
        Description: "Users belong to this group"
        GroupName: "user"
        Precedence: 1
        RoleArn: !GetAtt cognitoUserIAMRole.Arn
        UserPoolId: !Ref cognitoUserPool

    cognitoUserIAMRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: aromiUserRole
        Description: "IAM role for Users"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Federated:
                  - "cognito-identity.amazonaws.com"
              Action:
                - "sts:AssumeRoleWithWebIdentity"
              Condition:
                StringEquals:
                  "cognito-identity.amazonaws.com:aud": !Ref cognitoIdentityPool
        Policies:
          - PolicyName: "aromiUserGroupPolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "rds-data:*"
                  Resource:
                    - ${env:DB_READ_ARN}
                - Effect: "Allow"
                  Action:
                    - "s3:GetObject"
                    - "s3:PutObject"
                  Resource:
                    - "arn:aws:s3:::aromi-storage/*"

    cognitoIdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties:
        AllowUnauthenticatedIdentities: true
        CognitoIdentityProviders:
          - ClientId: !Ref cognitoUserPoolClient
            ProviderName: !GetAtt cognitoUserPool.ProviderName
        IdentityPoolName: aromiIdentityPool

    cognitoAuthIAMRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: "aromiAuthRole"
        Description: "IAM role for authenticated users"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Federated:
                  - "cognito-identity.amazonaws.com"
              Action:
                - "sts:AssumeRoleWithWebIdentity"
              Condition:
                StringEquals:
                  "cognito-identity.amazonaws.com:aud": !Ref cognitoIdentityPool
                "ForAnyValue:StringLike":
                  "cognito-identity.amazonaws.com:amr": "authenticated"
        Policies:
          - PolicyName: "aromiAuthUserPolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "rds-data:*"
                    - "s3:GetObject"
                    - "s3:PutObject"
                    - "appsync:GraphQL"
                  Resource:
                    - "${env:DB_READ_ARN}"
                    - "arn:aws:s3:::aromi-storage/*"

    cognitoUnauthIAMRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: "aromiUnauthRole"
        Description: "IAM role for guest users"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Federated:
                  - "cognito-identity.amazonaws.com"
              Action:
                - "sts:AssumeRoleWithWebIdentity"
              Condition:
                StringEquals:
                  "cognito-identity.amazonaws.com:aud": !Ref cognitoIdentityPool
                "ForAnyValue:StringLike":
                  "cognito-identity.amazonaws.com:amr": "unauthenticated"
        Policies:
          - PolicyName: "aromiUnauthUserPolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "appsync:GraphQL"
                    - "s3:GetObject"
                    - "s3:ListBucket"
                  Resource:
                    - "arn:aws:s3:::aromi-storage/*"

    cognitoIdentityPoolRoleAttachment:
      Type: AWS::Cognito::IdentityPoolRoleAttachment
      Properties:
        IdentityPoolId: !Ref cognitoIdentityPool
        Roles:
          authenticated: !GetAtt cognitoAuthIAMRole.Arn
          unauthenticated: !GetAtt cognitoUnauthIAMRole.Arn
