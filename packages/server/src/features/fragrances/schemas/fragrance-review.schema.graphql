type FragranceReview {
  id: ID!
  rating: Float!
  body: String

  author: User!
  fragrance: Fragrance!
  votes: VoteInfo!
}

type FragranceReviewInfo {
  count: Int!
  averageRating: Float
  distribution: [FragranceReviewInfoDistribution!]! 
}

type FragranceReviewInfoDistribution {
  rating: Int!
  count: Int!
}

type FragranceReviewEdge {
  node: FragranceReview!
  cursor: String!
}

type FragranceReviewConnection {
  edges: [FragranceReviewEdge!]!
  pageInfo: PageInfo!
}

enum FragranceReviewSortBy {
  RECENT
}

input FragranceReviewSortInput {
  direction: SortDirection
  by: FragranceReviewSortBy
}

input FragranceReviewPaginationInput {
  first: Int
  after: String
  sort: FragranceReviewSortInput
}

input CreateFragranceReviewInput {
  fragranceId: ID!
  rating: Float!
  body: String
}

input DeleteFragranceReviewInput {
  reviewId: ID!
}

input VoteOnFragranceReviewInput {
  reviewId: ID!
  vote: Int!
}

extend type Mutation {
  createFragranceReview(input: CreateFragranceReviewInput!): FragranceReview!
  deleteFragranceReview(input: DeleteFragranceReviewInput!): FragranceReview!
  voteOnFragranceReview(input: VoteOnFragranceReviewInput!): FragranceReview!
}