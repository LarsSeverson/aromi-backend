type FragranceCollectionItem {
  id: ID!
  fragrance: Fragrance!
  collection: FragranceCollection!
}

type FragranceCollectionItemEdge {
  node: FragranceCollectionItem!
  cursor: String!
}

type FragranceCollectionItemConnection {
  edges: [FragranceCollectionItemEdge!]!
  pageInfo: PageInfo!
}

enum FragranceCollectionItemSortBy {
  POSITION
}

input FragranceCollectionItemSortInput {
  direction: SortDirection
  by: FragranceCollectionItemSortBy
}

input FragranceCollectionItemPaginationInput {
  first: Int
  after: String
  sort: FragranceCollectionItemSortInput
}

input CreateFragranceCollectionItemInput {
  collectionId: ID!
  fragranceId: ID!
}

input MoveFragranceCollectionItemsInput {
  collectionId: ID!
  insertBefore: ID
  rangeStart: ID!
  rangeLength: Int
}

input DeleteFragranceCollectionItemInput {
  collectionId: ID!
  fragranceId: ID!
}

input AddFragranceToCollectionsInput {
  collectionIds: [ID!]!
  fragranceId: ID!
}

input RemoveFragranceFromCollectionsInput {
  collectionIds: [ID!]!
  fragranceId: ID!
}

extend type Mutation {
  createFragranceCollectionItem(input: CreateFragranceCollectionItemInput!): FragranceCollectionItem!
  moveFragranceCollectionItems(input: MoveFragranceCollectionItemsInput!): [FragranceCollectionItem!]!
  deleteFragranceCollectionItem(input: DeleteFragranceCollectionItemInput!): FragranceCollectionItem!

  addFragranceToCollections(input: AddFragranceToCollectionsInput!): [FragranceCollectionItem!]!
  removeFragranceFromCollections(input: RemoveFragranceFromCollectionsInput!): [FragranceCollectionItem!]!
}