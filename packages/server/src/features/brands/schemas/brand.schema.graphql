type Brand {
  id: ID!
  name: String!
  website: String
  description: String
  avatar: Asset
  votes: VoteInfo!

  fragrances(input: FragrancePaginationInput): FragranceConnection!
}

type BrandEdge {
  node: Brand!
  cursor: String!
}

type BrandConnection {
  edges: [BrandEdge!]!
  pageInfo: PageInfo!
}

enum BrandSortBy {
  RECENT
}

input BrandSortInput {
  direction: SortDirection
  by: BrandSortBy
}

input BrandPaginationInput {
  first: Int
  after: String
  sort: BrandSortInput
}

extend type Query {
  brand(id: ID!): Brand
  brands(input: BrandPaginationInput): BrandConnection!
  searchBrands(input: SearchInput): [Brand!]!
}
