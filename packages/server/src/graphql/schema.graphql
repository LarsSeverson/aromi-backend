type Accord {
  color: String!
  id: ID!
  name: String!
}

type AccordConnection {
  edges: [AccordEdge!]!
  pageInfo: PageInfo!
}

type AccordEdge {
  cursor: String!
  node: Accord!
}

type AccordEdit {
  accord: Accord!
  id: ID!
  proposedColor: String
  proposedDescription: String
  proposedName: String
  reason: String
  reviewer: User
  status: EditStatus!
  user: User!
}

type AccordEditConnection {
  edges: [AccordEditEdge!]!
  pageInfo: PageInfo!
}

type AccordEditEdge {
  cursor: String!
  node: AccordEdit!
}

input AccordEditPaginationInput {
  after: String
  first: Int
  sort: AccordEditSortInput
}

enum AccordEditSortBy {
  RECENT
}

input AccordEditSortInput {
  by: AccordEditSortBy
  direction: SortDirection
}

input AccordPaginationInput {
  after: String
  first: Int
  sort: AccordSortInput
}

type AccordRequest {
  color: String
  description: String
  id: ID!
  name: String
  requestStatus: RequestStatus!
  thumbnail: Asset
  user: User!
  version: Int!
  votes: VoteInfo!
}

type AccordRequestConnection {
  edges: [AccordRequestEdge!]!
  pageInfo: PageInfo!
}

type AccordRequestEdge {
  cursor: String!
  node: AccordRequest!
}

enum AccordSortBy {
  RECENT
}

input AccordSortInput {
  by: AccordSortBy
  direction: SortDirection
}

type Asset {
  contentSize: Int!
  contentType: String!
  id: ID!
  name: String!
  s3Key: String!
  url: String
}

type AuthCodeDeliveryDetails {
  attribute: String
  destination: String
  method: String
}

type AuthDeliveryResult {
  delivery: AuthCodeDeliveryDetails
  isComplete: Boolean!
}

type AuthTokenPayload {
  accessToken: String!
  expiresIn: Int!
  idToken: String!
}

enum AvatarStatus {
  FAILED
  PENDING
  PROCESSING
  READY
}

type Brand {
  avatar: String!
  fragrances(input: FragrancePaginationInput): FragranceConnection!
  id: ID!
  name: String!
  website: String
}

type BrandConnection {
  edges: [BrandEdge!]!
  pageInfo: PageInfo!
}

type BrandEdge {
  cursor: String!
  node: Brand!
}

type BrandEdit {
  brand: Brand!
  id: ID!
  proposedAvatar: Asset
  proposedDescription: String
  proposedName: String
  proposedWebsite: String
  reason: String
  reviewer: User
  status: EditStatus!
  user: User!
}

type BrandEditConnection {
  edges: [BrandEditEdge!]!
  pageInfo: PageInfo!
}

type BrandEditEdge {
  cursor: String!
  node: BrandEdit!
}

input BrandEditPaginationInput {
  after: String
  first: Int
  sort: BrandEditSortInput
}

enum BrandEditSortBy {
  RECENT
}

input BrandEditSortInput {
  by: BrandEditSortBy
  direction: SortDirection
}

input BrandPaginationInput {
  after: String
  first: Int
  sort: BrandSortInput
}

type BrandRequest {
  description: String
  id: ID!
  image: BrandRequestImage
  name: String
  requestStatus: RequestStatus!
  user: User!
  version: Int!
  votes: VoteInfo!
  website: String
}

type BrandRequestConnection {
  edges: [BrandRequestEdge!]!
  pageInfo: PageInfo!
}

type BrandRequestEdge {
  cursor: String!
  node: BrandRequest!
}

type BrandRequestImage {
  id: ID!
  type: String!
  url: String
}

type BrandRequestImageConnection {
  edges: [BrandRequestImageEdge!]!
  pageInfo: PageInfo!
}

type BrandRequestImageEdge {
  cursor: String!
  node: BrandRequestImage!
}

enum BrandSortBy {
  RECENT
}

input BrandSortInput {
  by: BrandSortBy
  direction: SortDirection
}

enum Concentration {
  BODY_MIST
  EAU_FRAICHE
  EDC
  EDP
  EDT
  OIL
  OTHER
  PARFUM
}

input ConfirmForgotPasswordInput {
  code: String!
  email: String!
  password: String!
}

input ConfirmSignUpInput {
  code: String!
  email: String!
}

input CreateAccordEditInput {
  accordId: ID!
  proposedColor: String
  proposedDescription: String
  proposedName: String
  reason: String
}

input CreateAccordRequestInput {
  color: String
  description: String
  name: String
}

input CreateBrandEditInput {
  brandId: ID!
  proposedAvatarId: ID
  proposedDescription: String
  proposedName: String
  proposedWebsite: String
  reason: String
}

input CreateBrandRequestInput {
  description: String
  name: String
  website: String
}

input CreateFragranceEditInput {
  fragranceId: ID!
  proposedBrandId: ID
  proposedConcentration: Concentration
  proposedDescription: String
  proposedImageId: ID
  proposedName: String
  proposedReleaseYear: Int
  proposedStatus: FragranceStatus
  reason: String
}

input CreateFragranceRequestInput {
  concentration: Concentration
  description: String
  name: String
  releaseYear: Int
  status: FragranceStatus
}

input CreateNoteEditInput {
  noteId: ID!
  proposedDescription: String
  proposedName: String
  proposedThumbnailId: String
  reason: String
}

input CreateNoteRequestInput {
  color: String
  description: String
  name: String
}

scalar Date

input DeleteAccordRequestInput {
  id: ID!
}

input DeleteAssetInput {
  id: ID!
}

input DeleteBrandRequestImageInput {
  assetId: ID!
  requestId: ID!
  version: Int!
}

input DeleteBrandRequestInput {
  id: ID!
}

input DeleteFragranceRequestImageInput {
  assetId: ID!
  requestId: ID!
  version: Int!
}

input DeleteFragranceRequestInput {
  id: ID!
}

input DeleteNoteRequestImageInput {
  assetId: ID!
  requestId: ID!
  version: Int!
}

input DeleteNoteRequestInput {
  id: ID!
}

type EditJob {
  error: String
  id: ID!
  status: EditJobStatus!
}

enum EditJobStatus {
  FAILED
  PROCESSING
  QUEUED
  SUCCESS
}

enum EditStatus {
  APPROVED
  PENDING
  REJECTED
}

input FinalizeBrandRequestImageInput {
  assetId: ID!
  requestId: ID!
  version: Int!
}

input FinalizeFragranceRequestImageInput {
  assetId: ID!
  requestId: ID!
  version: Int!
}

input FinalizeNoteRequestImageInput {
  assetId: ID!
  requestId: ID!
  version: Int!
}

input ForgotPasswordInput {
  email: String!
}

type Fragrance {
  accords(input: FragranceAccordPaginationInput): FragranceAccordConnection!
  brand: Brand!
  concentration: Concentration!
  description: String
  id: ID!
  images: [FragranceImage!]!
  name: String!
  notes(input: FragranceNotePaginationInput): FragranceNoteConnection!
  releaseYear: Int!
  status: FragranceStatus!
  traits: [FragranceTrait!]!
}

type FragranceAccord {
  accord: Accord!
  id: ID!
  votes: VoteInfo!
}

type FragranceAccordConnection {
  edges: [FragranceAccordEdge!]!
  pageInfo: PageInfo!
}

type FragranceAccordEdge {
  cursor: String!
  node: FragranceAccord!
}

input FragranceAccordPaginationInput {
  after: String
  first: Int
  sort: FragranceAccordSortInput
}

enum FragranceAccordSortBy {
  VOTES
}

input FragranceAccordSortInput {
  by: FragranceAccordSortBy
  direction: SortDirection
}

type FragranceConnection {
  edges: [FragranceEdge!]!
  pageInfo: PageInfo!
}

type FragranceEdge {
  cursor: String!
  node: Fragrance!
}

type FragranceEdit {
  fragrance: Fragrance!
  id: ID!
  proposedBrand: Brand
  proposedConcentration: Concentration
  proposedDescription: String
  proposedImage: Asset
  proposedName: String
  proposedReleaseYear: Int
  proposedStatus: FragranceStatus
  reason: String
  reviewer: User
  status: EditStatus!
  user: User!
}

type FragranceEditConnection {
  edges: [FragranceEditEdge!]!
  pageInfo: PageInfo!
}

type FragranceEditEdge {
  cursor: String!
  node: FragranceEdit!
}

input FragranceEditPaginationInput {
  after: String
  first: Int
  sort: FragranceEditSortInput
}

enum FragranceEditSortBy {
  RECENT
}

input FragranceEditSortInput {
  by: FragranceEditSortBy
  direction: SortDirection
}

type FragranceImage {
  height: Int!
  id: ID!
  primaryColor: String
  url: String
  width: Int!
}

type FragranceImageConnection {
  edges: [FragranceImageEdge!]!
  pageInfo: PageInfo!
}

type FragranceImageEdge {
  cursor: String!
  node: FragranceImage!
}

type FragranceNote {
  id: ID!
  layer: NoteLayer!
  note: Note!
  votes: VoteInfo!
}

type FragranceNoteConnection {
  edges: [FragranceNoteEdge!]!
  pageInfo: PageInfo!
}

type FragranceNoteEdge {
  cursor: String!
  node: FragranceNote!
}

input FragranceNotePaginationInput {
  after: String
  first: Int
  layer: NoteLayer!
  sort: FragranceNoteSortInput
}

enum FragranceNoteSortBy {
  VOTES
}

input FragranceNoteSortInput {
  by: FragranceNoteSortBy
  direction: SortDirection
}

input FragrancePaginationInput {
  after: String
  first: Int
  sort: FragranceSortInput
}

type FragranceRequest {
  accords: [Accord!]!
  brand: Brand
  concentration: Concentration
  description: String
  fragranceStatus: FragranceStatus
  id: ID!
  image: FragranceRequestImage
  name: String
  notes(layer: NoteLayer!): [Note!]!
  releaseYear: Int
  requestStatus: RequestStatus!
  trait(type: TraitTypeEnum!): FragranceRequestTrait!
  traits: [FragranceRequestTrait!]!
  user: User!
  version: Int!
  votes: VoteInfo!
}

type FragranceRequestConnection {
  edges: [FragranceRequestEdge!]!
  pageInfo: PageInfo!
}

type FragranceRequestEdge {
  cursor: String!
  node: FragranceRequest!
}

type FragranceRequestImage {
  id: ID!
  type: String!
  url: String!
}

type FragranceRequestImageConnection {
  edges: [FragranceRequestImageEdge!]!
  pageInfo: PageInfo!
}

type FragranceRequestImageEdge {
  cursor: String!
  node: FragranceRequestImage!
}

type FragranceRequestTrait {
  selectedOption: TraitOption!
  traitType: TraitTypeEnum!
}

enum FragranceSortBy {
  RECENT
}

input FragranceSortInput {
  by: FragranceSortBy
  direction: SortDirection
}

enum FragranceStatus {
  CURRENT
  DISCONTINUED
  REFORMULATED
}

type FragranceTrait {
  id: ID!
  myVote: TraitVote
  name: String!
  options: [TraitOption!]!
  stats: TraitStats
  type: TraitTypeEnum!
}

input FragranceTraitInput {
  type: TraitTypeEnum!
}

scalar JSON

input LogInInput {
  email: String!
  password: String!
}

type Mutation {
  confirmForgotPassword(input: ConfirmForgotPasswordInput!): Boolean!
  confirmSignUp(input: ConfirmSignUpInput!): Boolean!
  createAccordEdit(input: CreateAccordEditInput!): AccordEdit!
  createAccordRequest(input: CreateAccordRequestInput): AccordRequest!
  createBrandEdit(input: CreateBrandEditInput!): BrandEdit!
  createBrandRequest(input: CreateBrandRequestInput!): BrandRequest!
  createFragranceEdit(input: CreateFragranceEditInput!): FragranceEdit!
  createFragranceRequest(input: CreateFragranceRequestInput): FragranceRequest!
  createNoteEdit(input: CreateNoteEditInput!): NoteEdit!
  createNoteRequest(input: CreateNoteRequestInput!): NoteRequest!
  deleteAccordRequest(input: DeleteAccordRequestInput!): AccordRequest!
  deleteAsset(input: DeleteAssetInput!): Boolean!
  deleteBrandRequest(input: DeleteBrandRequestInput!): BrandRequest!
  deleteBrandRequestImage(input: DeleteBrandRequestImageInput!): BrandRequest!
  deleteFragranceRequest(input: DeleteFragranceRequestInput!): FragranceRequest!
  deleteFragranceRequestImage(input: DeleteFragranceRequestImageInput!): FragranceRequest!
  deleteNoteRequest(input: DeleteNoteRequestInput!): NoteRequest!
  deleteNoteRequestImage(input: DeleteNoteRequestImageInput!): NoteRequest!
  finalizeBrandRequestImage(input: FinalizeBrandRequestImageInput!): BrandRequest!
  finalizeFragranceRequestImage(input: FinalizeFragranceRequestImageInput!): FragranceRequest!
  finalizeNoteRequestImage(input: FinalizeNoteRequestImageInput!): NoteRequest!
  forgotPassword(input: ForgotPasswordInput!): AuthDeliveryResult!
  logIn(input: LogInInput!): AuthTokenPayload!
  logOut: Boolean!
  refresh: AuthTokenPayload
  resendSignUpCode(input: ResendSignUpCodeInput!): AuthDeliveryResult!
  reviewAccordEdit(input: ReviewAccordEditInput!): AccordEdit!
  reviewBrandEdit(input: ReviewBrandEditInput!): BrandEdit!
  reviewFragranceEdit(input: ReviewFragranceEditInput!): FragranceEdit!
  reviewNoteEdit(input: ReviewNoteEditInput!): NoteEdit!
  setFragranceRequestAccords(input: SetFragranceRequestAccordsInput!): FragranceRequest!
  setFragranceRequestBrand(input: SetFragranceRequestBrandInput!): FragranceRequest!
  setFragranceRequestNotes(input: SetFragranceRequestNotesInput!): FragranceRequest!
  setFragranceRequestTrait(input: SetFragranceRequestTraitInput!): FragranceRequest!
  signUp(input: SignUpInput!): AuthDeliveryResult!
  stageAccordRequestThumbnail(input: StageAssetInput!): PresignedUpload!
  stageBrandEditAvatar(input: StageGenericAssetInput!): PresignedUpload!
  stageBrandRequestImage(input: StageAssetInput!): PresignedUpload!
  stageFragranceEditImage(input: StageAssetInput!): PresignedUpload!
  stageFragranceRequestImage(input: StageAssetInput!): PresignedUpload!
  stageNoteEditThumbnail(input: StageGenericAssetInput!): PresignedUpload!
  stageNoteRequestImage(input: StageAssetInput!): PresignedUpload!
  submitAccordRequest(input: SubmitAccordRequestInput!): AccordRequest!
  submitBrandRequest(input: SubmitBrandRequestInput!): BrandRequest!
  submitFragranceRequest(input: SubmitFragranceRequestInput!): FragranceRequest!
  submitNoteRequest(input: SubmitNoteRequestInput!): NoteRequest!
  updateAccordRequest(input: UpdateAccordRequestInput!): AccordRequest!
  updateBrandRequest(input: UpdateBrandRequestInput!): BrandRequest!
  updateFragranceRequest(input: UpdateFragranceRequestInput!): FragranceRequest!
  updateNoteRequest(input: UpdateNoteRequestInput!): NoteRequest!
  updateUser(input: UpdateUserInput!): User!
  updateUserAvatar(input: StageAssetInput!): PresignedUpload!
  voteOnAccordRequest(input: VoteOnAccordRequestInput!): AccordRequest!
  voteOnBrandRequest(input: VoteOnBrandRequestInput!): BrandRequest!
  voteOnFragranceAccord(input: VoteOnFragranceAccordInput!): Accord!
  voteOnFragranceNote(input: VoteOnFragranceNoteInput!): Note!
  voteOnFragranceRequest(input: VoteOnFragranceRequestInput!): FragranceRequest!
  voteOnFragranceTrait(input: VoteOnFragranceTraitInput!): TraitVote
  voteOnNoteRequest(input: VoteOnNoteRequestInput!): NoteRequest!
}

type Note {
  id: ID!
  name: String!
  thumbnail: String
}

type NoteConnection {
  edges: [NoteEdge!]!
  pageInfo: PageInfo!
}

type NoteEdge {
  cursor: String!
  node: Note!
}

type NoteEdit {
  id: ID!
  note: Note!
  proposedDescription: String
  proposedName: String
  proposedThumbnail: Asset
  reason: String
  reviewer: User
  status: EditStatus!
  user: User!
}

type NoteEditConnection {
  edges: [NoteEditEdge!]!
  pageInfo: PageInfo!
}

type NoteEditEdge {
  cursor: String!
  node: NoteEdit!
}

input NoteEditPaginationInput {
  after: String
  first: Int
  sort: NoteEditSortInput
}

enum NoteEditSortBy {
  RECENT
}

input NoteEditSortInput {
  by: NoteEditSortBy
  direction: SortDirection
}

enum NoteLayer {
  BASE
  MIDDLE
  TOP
}

input NotePaginationInput {
  after: String
  first: Int
  sort: NoteSortInput
}

type NoteRequest {
  description: String
  id: ID!
  image: NoteRequestImage
  name: String
  requestStatus: RequestStatus!
  user: User!
  version: Int!
  votes: VoteInfo!
}

type NoteRequestConnection {
  edges: [NoteRequestEdge!]!
  pageInfo: PageInfo!
}

type NoteRequestEdge {
  cursor: String!
  node: NoteRequest!
}

type NoteRequestImage {
  id: ID!
  type: String!
  url: String
}

type NoteRequestImageConnection {
  edges: [NoteRequestImageEdge!]!
  pageInfo: PageInfo!
}

type NoteRequestImageEdge {
  cursor: String!
  node: NoteRequestImage!
}

enum NoteSortBy {
  RECENT
}

input NoteSortInput {
  by: NoteSortBy
  direction: SortDirection
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type PresignedUpload {
  fields: JSON!
  id: ID!
  url: String!
}

type Query {
  accordEdit(id: ID!): AccordEdit!
  accordEdits(input: AccordEditPaginationInput): AccordEditConnection!
  accordRequest(id: ID!): AccordRequest!
  accordRequests(input: RequestPaginationInput): AccordRequestConnection!
  accords(input: AccordPaginationInput): AccordConnection!
  brand(id: ID!): Brand
  brandEdit(id: ID!): BrandEdit!
  brandEdits(input: BrandEditPaginationInput): BrandEditConnection!
  brandRequest(id: ID!): BrandRequest!
  brandRequests(input: RequestPaginationInput): BrandRequestConnection!
  brands(input: BrandPaginationInput): BrandConnection!
  fragrance(id: ID!): Fragrance!
  fragranceEdit(id: ID!): FragranceEdit!
  fragranceEdits(input: FragranceEditPaginationInput): FragranceEditConnection!
  fragranceRequest(id: ID!): FragranceRequest!
  fragranceRequests(input: RequestPaginationInput): FragranceRequestConnection!
  fragrances(input: FragrancePaginationInput!): FragranceConnection!
  me: User!
  noteEdit(id: ID!): NoteEdit!
  noteEdits(input: NoteEditPaginationInput): NoteEditConnection!
  noteRequest(id: ID!): NoteRequest!
  noteRequests(input: RequestPaginationInput): NoteRequestConnection!
  notes(input: NotePaginationInput): NoteConnection!
  searchAccords(input: SearchInput): [Accord!]!
  searchBrands(input: SearchInput): [Brand!]!
  searchFragrances(input: SearchInput): [Fragrance!]!
  searchNotes(input: SearchInput): [Note!]!
  user(id: ID!): User!
}

input RequestPaginationInput {
  after: String
  first: Int
  sort: RequestSortInput
}

enum RequestSortBy {
  RECENT
}

input RequestSortInput {
  by: RequestSortBy
  direction: SortDirection
}

enum RequestStatus {
  ACCEPTED
  DRAFT
  PENDING
  REJECTED
}

input ResendSignUpCodeInput {
  email: String!
}

input ReviewAccordEditInput {
  editId: ID!
  feedback: String
  status: EditStatus!
}

input ReviewBrandEditInput {
  editId: ID!
  feedback: String
  status: EditStatus!
}

input ReviewFragranceEditInput {
  editId: ID!
  feedback: String
  status: EditStatus!
}

input ReviewNoteEditInput {
  editId: ID!
  feedback: String
  status: EditStatus!
}

input SearchInput {
  pagination: SearchPaginationInput
  term: String
}

input SearchPaginationInput {
  first: Int
  offset: Int
  sort: SearchSortInput
}

enum SearchSortBy {
  RELEVANCE
}

input SearchSortInput {
  by: SearchSortBy
  direction: SortDirection
}

input SetFragranceRequestAccordsInput {
  accordIds: [ID!]!
  requestId: ID!
  version: Int!
}

input SetFragranceRequestBrandInput {
  brandId: ID
  requestId: ID!
  version: Int!
}

input SetFragranceRequestNotesInput {
  layer: NoteLayer!
  noteIds: [ID!]!
  requestId: ID!
  version: Int!
}

input SetFragranceRequestTraitInput {
  requestId: ID!
  score: Int!
  traitType: TraitTypeEnum!
  version: Int!
}

input SignUpInput {
  email: String!
  password: String!
}

enum SortDirection {
  ASCENDING
  DESCENDING
}

input StageAssetInput {
  contentSize: Int!
  contentType: String!
  fileName: String!
  id: ID!
}

input StageGenericAssetInput {
  contentSize: Int!
  contentType: String!
  fileName: String!
}

input SubmitAccordRequestInput {
  id: ID!
}

input SubmitBrandRequestInput {
  id: ID!
}

input SubmitFragranceRequestInput {
  id: ID!
}

input SubmitNoteRequestInput {
  id: ID!
}

type TraitOption {
  id: ID!
  label: String!
  score: Int!
}

type TraitStats {
  averageScore: Float!
  distribution: [TraitVoteDistribution!]!
  totalVotes: Int!
}

enum TraitTypeEnum {
  APPEAL
  BALANCE
  COMPLEXITY
  GENDER
  LONGEVITY
  PROJECTION
}

type TraitVote {
  option: TraitOption!
}

type TraitVoteDistribution {
  option: TraitOption!
  votes: Int!
}

input UpdateAccordRequestInput {
  color: String
  description: String
  id: ID!
  name: String
}

input UpdateBrandRequestInput {
  description: String
  id: ID!
  name: String
  version: Int!
  website: String
}

input UpdateFragranceRequestInput {
  concentration: Concentration
  description: String
  id: ID!
  name: String
  releaseYear: Int
  status: FragranceStatus
  version: Int!
}

input UpdateNoteRequestInput {
  color: String
  description: String
  id: ID!
  name: String
  version: Int!
}

input UpdateUserInput {
  id: ID!
  username: String
}

type User {
  avatarSrc: String
  avatarStatus: AvatarStatus!
  brandRequests(input: RequestPaginationInput): BrandRequestConnection!
  email: String!
  fragranceRequests(input: RequestPaginationInput): FragranceRequestConnection!
  id: ID!
  username: String!
}

type VoteInfo {
  downvotes: Int!
  myVote: Int
  score: Int!
  upvotes: Int!
}

input VoteOnAccordRequestInput {
  requestId: ID!
  vote: Int!
}

input VoteOnBrandRequestInput {
  requestId: ID!
  vote: Int!
}

input VoteOnFragranceAccordInput {
  accordId: ID!
  fragranceId: ID!
}

input VoteOnFragranceNoteInput {
  fragranceId: ID!
  layer: NoteLayer!
  noteId: ID!
}

input VoteOnFragranceRequestInput {
  requestId: ID!
  vote: Int!
}

input VoteOnFragranceTraitInput {
  fragranceId: ID!
  traitOptionId: ID!
  traitTypeId: ID!
}

input VoteOnNoteRequestInput {
  requestId: ID!
  vote: Int!
}