/**
 * This file was generated by kysely-codegen.
 * Please do not edit it manually.
 */

import type { ColumnType } from "kysely";

export enum AssetStatus {
  READY = "ready",
  STAGED = "staged",
}

export enum AvatarStatus {
  FAILED = "FAILED",
  PENDING = "PENDING",
  PROCESSING = "PROCESSING",
  READY = "READY",
}

export enum EditStatus {
  APPROVED = "APPROVED",
  PENDING = "PENDING",
  REJECTED = "REJECTED",
}

export enum EditType {
  ACCORD = "accord",
  BRAND = "brand",
  FRAGRANCE = "fragrance",
  NOTE = "note",
}

export enum FragranceConcentration {
  BODY_MIST = "BODY_MIST",
  EAU_FRAICHE = "EAU_FRAICHE",
  EDC = "EDC",
  EDP = "EDP",
  EDT = "EDT",
  OIL = "OIL",
  OTHER = "OTHER",
  PARFUM = "PARFUM",
}

export enum FragranceStatus {
  CURRENT = "CURRENT",
  DISCONTINUED = "DISCONTINUED",
  REFORMULATED = "REFORMULATED",
}

export enum JobStatus {
  FAILED = "FAILED",
  PROCESSING = "PROCESSING",
  QUEUED = "QUEUED",
  SUCCESS = "SUCCESS",
}

export enum NoteLayerEnum {
  BASE = "base",
  MIDDLE = "middle",
  TOP = "top",
}

export enum RequestStatus {
  ACCEPTED = "ACCEPTED",
  DENIED = "DENIED",
  DRAFT = "DRAFT",
  PENDING = "PENDING",
}

export enum RequestType {
  ACCORD = "accord",
  BRAND = "brand",
  FRAGRANCE = "fragrance",
  NOTE = "note",
}

export enum UserRole {
  ADMIN = "ADMIN",
  MODERATOR = "MODERATOR",
  USER = "USER",
}

export type Generated<T> = T extends ColumnType<infer S, infer I, infer U>
  ? ColumnType<S, I | undefined, U>
  : ColumnType<T, T | undefined, T>;

export type Int8 = ColumnType<string, bigint | number | string, bigint | number | string>;

export type Timestamp = ColumnType<string, string, string>;

export interface AccordEdit {
  accordId: string;
  createdAt: Generated<Timestamp>;
  deletedAt: Timestamp | null;
  id: Generated<string>;
  proposedColor: string | null;
  proposedDescription: string | null;
  proposedName: string | null;
  reason: string | null;
  reviewedAt: Timestamp | null;
  reviewedBy: string | null;
  reviewerFeedback: string | null;
  status: Generated<EditStatus>;
  userId: string;
}

export interface AccordImage {
  accordId: string;
  contentType: string;
  createdAt: Generated<Timestamp>;
  id: Generated<string>;
  name: string;
  s3Key: string;
  sizeBytes: Int8;
}

export interface AccordRequest {
  assetId: string | null;
  color: string | null;
  createdAt: Generated<Timestamp>;
  deletedAt: Timestamp | null;
  description: string | null;
  id: Generated<string>;
  name: string | null;
  requestStatus: Generated<RequestStatus>;
  updatedAt: Generated<Timestamp>;
  userId: string;
  version: Generated<number>;
}

export interface AccordRequestScore {
  deletedAt: Timestamp | null;
  downvotes: Generated<number>;
  requestId: string;
  score: Generated<number>;
  updatedAt: Generated<Timestamp>;
  upvotes: Generated<number>;
}

export interface AccordRequestVote {
  createdAt: Generated<Timestamp>;
  id: Generated<string>;
  requestId: string;
  userId: string;
  vote: number;
}

export interface Accord {
  color: Generated<string>;
  createdAt: Generated<Timestamp>;
  deletedAt: Timestamp | null;
  description: string | null;
  id: Generated<string>;
  name: string;
  updatedAt: Generated<Timestamp>;
}

export interface AssetUpload {
  contentType: string;
  createdAt: Generated<Timestamp>;
  deletedAt: Timestamp | null;
  id: Generated<string>;
  name: string;
  s3Key: string;
  sizeBytes: Int8;
  status: Generated<AssetStatus>;
  updatedAt: Generated<Timestamp>;
}

export interface BrandEdit {
  brandId: string;
  createdAt: Generated<Timestamp>;
  deletedAt: Timestamp | null;
  id: Generated<string>;
  proposedAvatarId: string | null;
  proposedDescription: string | null;
  proposedName: string | null;
  proposedWebsite: string | null;
  reason: string | null;
  reviewedAt: Timestamp | null;
  reviewedBy: string | null;
  reviewerFeedback: string | null;
  status: Generated<EditStatus>;
  userId: string;
}

export interface BrandImage {
  brandId: string;
  contentType: string;
  createdAt: Generated<Timestamp>;
  id: Generated<string>;
  name: string;
  s3Key: string;
  sizeBytes: Int8;
}

export interface BrandRequest {
  assetId: string | null;
  createdAt: Generated<Timestamp>;
  deletedAt: Timestamp | null;
  description: string | null;
  id: Generated<string>;
  name: string | null;
  requestStatus: Generated<RequestStatus>;
  updatedAt: Generated<Timestamp>;
  userId: string;
  version: Generated<number>;
  website: string | null;
}

export interface BrandRequestScore {
  deletedAt: Timestamp | null;
  downvotes: Generated<number>;
  requestId: string;
  score: Generated<number>;
  updatedAt: Generated<Timestamp>;
  upvotes: Generated<number>;
}

export interface BrandRequestVote {
  createdAt: Generated<Timestamp>;
  id: Generated<string>;
  requestId: string;
  userId: string;
  vote: number;
}

export interface Brand {
  avatarId: string | null;
  createdAt: Generated<Timestamp>;
  deletedAt: Timestamp | null;
  description: string | null;
  id: Generated<string>;
  name: string;
  updatedAt: Generated<Timestamp>;
  website: string | null;
}

export interface BrandScore {
  brandId: string;
  downvotes: Generated<number>;
  score: Generated<number>;
  updatedAt: Generated<Timestamp>;
  upvotes: Generated<number>;
}

export interface BrandVote {
  brandId: string;
  createdAt: Generated<Timestamp>;
  deletedAt: Timestamp | null;
  id: Generated<string>;
  userId: string;
  vote: number;
}

export interface EditJob {
  createdAt: Generated<Timestamp>;
  editId: string;
  editType: EditType;
  error: string | null;
  id: Generated<string>;
  processedAt: Timestamp | null;
  status: Generated<JobStatus>;
  updatedAt: Generated<Timestamp>;
}

export interface FragranceAccord {
  accordId: string;
  createdAt: Generated<Timestamp>;
  deletedAt: Timestamp | null;
  dislikesCount: Generated<number>;
  fragranceId: string;
  id: Generated<string>;
  likesCount: Generated<number>;
  updatedAt: Generated<Timestamp>;
  voteScore: Generated<number>;
}

export interface FragranceAccordScore {
  accordId: string;
  downvotes: Generated<number>;
  fragranceId: string;
  score: Generated<number>;
  updatedAt: Generated<Timestamp>;
  upvotes: Generated<number>;
}

export interface FragranceAccordVote {
  accordId: string;
  createdAt: Generated<Timestamp | null>;
  deletedAt: Timestamp | null;
  fragranceId: string;
  id: Generated<string>;
  updatedAt: Generated<Timestamp | null>;
  userId: string;
  vote: Generated<number>;
}

export interface FragranceCollection {
  createdAt: Generated<Timestamp>;
  deletedAt: Timestamp | null;
  id: Generated<string>;
  name: string;
  updatedAt: Generated<Timestamp>;
  userId: string;
}

export interface FragranceEdit {
  createdAt: Generated<Timestamp>;
  deletedAt: Timestamp | null;
  fragranceId: string;
  id: Generated<string>;
  proposedBrandId: string | null;
  proposedConcentration: FragranceConcentration | null;
  proposedDescription: string | null;
  proposedImageId: string | null;
  proposedName: string | null;
  proposedReleaseYear: number | null;
  proposedStatus: FragranceStatus | null;
  reason: string | null;
  reviewedAt: Timestamp | null;
  reviewedBy: string | null;
  reviewerFeedback: string | null;
  status: Generated<EditStatus>;
  userId: string;
}

export interface FragranceImage {
  contentType: Generated<string>;
  createdAt: Generated<Timestamp>;
  deletedAt: Timestamp | null;
  fragranceId: string;
  height: Generated<number>;
  id: Generated<string>;
  name: Generated<string>;
  oldS3Key: string | null;
  primaryColor: string | null;
  s3Key: string;
  sizeBytes: Generated<Int8>;
  updatedAt: Generated<Timestamp>;
  url: string | null;
  width: Generated<number>;
}

export interface FragranceNote {
  createdAt: Generated<Timestamp>;
  deletedAt: Timestamp | null;
  dislikesCount: Generated<number>;
  fragranceId: string;
  id: Generated<string>;
  layer: NoteLayerEnum;
  likesCount: Generated<number>;
  noteId: string;
  updatedAt: Generated<Timestamp>;
  voteScore: Generated<number>;
}

export interface FragranceNoteScore {
  downvotes: Generated<number>;
  fragranceId: string;
  layer: NoteLayerEnum;
  noteId: string;
  score: Generated<number>;
  updatedAt: Generated<Timestamp>;
  upvotes: Generated<number>;
}

export interface FragranceNoteVote {
  createdAt: Generated<Timestamp>;
  deletedAt: Timestamp | null;
  fragranceId: string;
  id: Generated<string>;
  layer: NoteLayerEnum;
  noteId: string;
  userId: string;
  vote: Generated<number>;
}

export interface FragranceRequestAccord {
  accordId: string;
  createdAt: Generated<Timestamp>;
  deletedAt: Timestamp | null;
  id: Generated<string>;
  requestId: string;
}

export interface FragranceRequestNote {
  createdAt: Generated<Timestamp>;
  deletedAt: Timestamp | null;
  id: Generated<string>;
  layer: NoteLayerEnum;
  noteId: string;
  requestId: string;
}

export interface FragranceRequest {
  assetId: string | null;
  brandId: string | null;
  concentration: Generated<FragranceConcentration | null>;
  createdAt: Generated<Timestamp>;
  deletedAt: Timestamp | null;
  description: string | null;
  fragranceStatus: Generated<FragranceStatus | null>;
  id: Generated<string>;
  name: string | null;
  releaseYear: number | null;
  requestStatus: Generated<RequestStatus>;
  updatedAt: Generated<Timestamp>;
  userId: string;
  version: Generated<number>;
}

export interface FragranceRequestScore {
  deletedAt: Timestamp | null;
  downvotes: Generated<number>;
  requestId: string;
  score: Generated<number>;
  updatedAt: Generated<Timestamp>;
  upvotes: Generated<number>;
}

export interface FragranceRequestTrait {
  deletedAt: Timestamp | null;
  id: Generated<string>;
  requestId: string;
  traitOptionId: string;
  traitTypeId: string;
}

export interface FragranceRequestVote {
  createdAt: Generated<Timestamp>;
  id: Generated<string>;
  requestId: string;
  userId: string;
  vote: number;
}

export interface Fragrance {
  brandId: string;
  concentration: Generated<FragranceConcentration>;
  createdAt: Generated<Timestamp>;
  deletedAt: Timestamp | null;
  description: string | null;
  id: Generated<string>;
  name: string;
  releaseYear: number | null;
  status: Generated<FragranceStatus>;
  updatedAt: Generated<Timestamp>;
}

export interface FragranceScore {
  downvotes: Generated<number>;
  fragranceId: string;
  rating: number | null;
  score: Generated<number>;
  updatedAt: Generated<Timestamp>;
  upvotes: Generated<number>;
}

export interface FragranceTraitVote {
  createdAt: Generated<Timestamp>;
  deletedAt: Timestamp | null;
  fragranceId: string;
  id: Generated<string>;
  traitOptionId: string;
  traitTypeId: string;
  userId: string;
}

export interface FragranceVote {
  createdAt: Generated<Timestamp>;
  deletedAt: Timestamp | null;
  fragranceId: string;
  id: Generated<string>;
  userId: string;
  vote: number;
}

export interface NoteEdit {
  createdAt: Generated<Timestamp>;
  deletedAt: Timestamp | null;
  id: Generated<string>;
  noteId: string;
  proposedDescription: string | null;
  proposedName: string | null;
  proposedThumbnailId: string | null;
  reason: string | null;
  reviewedAt: Timestamp | null;
  reviewedBy: string | null;
  reviewerFeedback: string | null;
  status: Generated<EditStatus>;
  userId: string;
}

export interface NoteImage {
  contentType: string;
  createdAt: Generated<Timestamp>;
  deletedAt: Timestamp | null;
  id: Generated<string>;
  name: string;
  noteId: string;
  s3Key: string;
  sizeBytes: Int8;
  updatedAt: Generated<Timestamp>;
}

export interface NoteRequest {
  assetId: string | null;
  createdAt: Generated<Timestamp>;
  deletedAt: Timestamp | null;
  description: string | null;
  id: Generated<string>;
  name: string | null;
  requestStatus: Generated<RequestStatus>;
  updatedAt: Generated<Timestamp>;
  userId: string;
  version: Generated<number>;
}

export interface NoteRequestScore {
  deletedAt: Timestamp | null;
  downvotes: Generated<number>;
  requestId: string;
  score: Generated<number>;
  updatedAt: Generated<Timestamp>;
  upvotes: Generated<number>;
}

export interface NoteRequestVote {
  createdAt: Generated<Timestamp>;
  id: Generated<string>;
  requestId: string;
  userId: string;
  vote: number;
}

export interface Note {
  createdAt: Generated<Timestamp>;
  deletedAt: Timestamp | null;
  description: string | null;
  id: Generated<string>;
  name: string;
  thumbnailImageId: string | null;
  updatedAt: Generated<Timestamp>;
}

export interface RequestJob {
  createdAt: Generated<Timestamp>;
  error: string | null;
  id: Generated<string>;
  processedAt: Timestamp | null;
  requestId: string;
  requestType: RequestType;
  status: Generated<JobStatus>;
  updatedAt: Generated<Timestamp>;
}

export interface TraitOption {
  id: Generated<string>;
  label: string;
  score: number;
  traitTypeId: string;
}

export interface TraitType {
  id: Generated<string>;
  name: string;
}

export interface User {
  avatarError: string | null;
  avatarS3Key: string | null;
  avatarStatus: Generated<AvatarStatus>;
  avatarUpdatedAt: Generated<Timestamp>;
  avatarUrl: string | null;
  cognitoSub: string;
  createdAt: Generated<Timestamp>;
  deletedAt: Timestamp | null;
  email: string;
  id: Generated<string>;
  role: Generated<UserRole>;
  updatedAt: Generated<Timestamp>;
  username: string;
}

export interface DB {
  accordEdits: AccordEdit;
  accordImages: AccordImage;
  accordRequests: AccordRequest;
  accordRequestScores: AccordRequestScore;
  accordRequestVotes: AccordRequestVote;
  accords: Accord;
  assetUploads: AssetUpload;
  brandEdits: BrandEdit;
  brandImages: BrandImage;
  brandRequests: BrandRequest;
  brandRequestScores: BrandRequestScore;
  brandRequestVotes: BrandRequestVote;
  brands: Brand;
  brandScores: BrandScore;
  brandVotes: BrandVote;
  editJobs: EditJob;
  fragranceAccords: FragranceAccord;
  fragranceAccordScores: FragranceAccordScore;
  fragranceAccordVotes: FragranceAccordVote;
  fragranceCollections: FragranceCollection;
  fragranceEdits: FragranceEdit;
  fragranceImages: FragranceImage;
  fragranceNotes: FragranceNote;
  fragranceNoteScores: FragranceNoteScore;
  fragranceNoteVotes: FragranceNoteVote;
  fragranceRequestAccords: FragranceRequestAccord;
  fragranceRequestNotes: FragranceRequestNote;
  fragranceRequests: FragranceRequest;
  fragranceRequestScores: FragranceRequestScore;
  fragranceRequestTraits: FragranceRequestTrait;
  fragranceRequestVotes: FragranceRequestVote;
  fragrances: Fragrance;
  fragranceScores: FragranceScore;
  fragranceTraitVotes: FragranceTraitVote;
  fragranceVotes: FragranceVote;
  noteEdits: NoteEdit;
  noteImages: NoteImage;
  noteRequests: NoteRequest;
  noteRequestScores: NoteRequestScore;
  noteRequestVotes: NoteRequestVote;
  notes: Note;
  requestJobs: RequestJob;
  traitOptions: TraitOption;
  traitTypes: TraitType;
  users: User;
}
